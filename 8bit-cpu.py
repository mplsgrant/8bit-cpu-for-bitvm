import circuit
from circuit import *
import bfcl
from bfcl import gate, operation
from pprint import pprint
import sys
import json
initial_state = json.loads( sys.argv[ 1 ] )
c = circuit()

#program counter
PC3 = c.gate(op.id_, is_input=True)
PC2 = c.gate(op.id_, is_input=True)
PC1 = c.gate(op.id_, is_input=True)
PC0 = c.gate(op.id_, is_input=True)
#microinstruction counter
MC1 = c.gate(op.id_, is_input=True)
MC0 = c.gate(op.id_, is_input=True)
#memory address regiser
M3 = c.gate(op.id_, is_input=True)
M2 = c.gate(op.id_, is_input=True)
M1 = c.gate(op.id_, is_input=True)
M0 = c.gate(op.id_, is_input=True)
#initial_carry_out
initial_carry_out = c.gate(op.id_, is_input=True)
#register A
A8 = c.gate(op.id_, is_input=True)
A7 = c.gate(op.id_, is_input=True)
A6 = c.gate(op.id_, is_input=True)
A5 = c.gate(op.id_, is_input=True)
A4 = c.gate(op.id_, is_input=True)
A3 = c.gate(op.id_, is_input=True)
A2 = c.gate(op.id_, is_input=True)
A1 = c.gate(op.id_, is_input=True)
#register B
pre_B8 = c.gate(op.id_, is_input=True)
pre_B7 = c.gate(op.id_, is_input=True)
pre_B6 = c.gate(op.id_, is_input=True)
pre_B5 = c.gate(op.id_, is_input=True)
pre_B4 = c.gate(op.id_, is_input=True)
pre_B3 = c.gate(op.id_, is_input=True)
pre_B2 = c.gate(op.id_, is_input=True)
pre_B1 = c.gate(op.id_, is_input=True)
#instruction register
IR8 = c.gate(op.id_, is_input=True)
IR7 = c.gate(op.id_, is_input=True)
IR6 = c.gate(op.id_, is_input=True)
IR5 = c.gate(op.id_, is_input=True)
IR4 = c.gate(op.id_, is_input=True)
IR3 = c.gate(op.id_, is_input=True)
IR2 = c.gate(op.id_, is_input=True)
IR1 = c.gate(op.id_, is_input=True)
#RAM registers
RAM_00_8 = c.gate(op.id_, is_input=True)
RAM_00_7 = c.gate(op.id_, is_input=True)
RAM_00_6 = c.gate(op.id_, is_input=True)
RAM_00_5 = c.gate(op.id_, is_input=True)
RAM_00_4 = c.gate(op.id_, is_input=True)
RAM_00_3 = c.gate(op.id_, is_input=True)
RAM_00_2 = c.gate(op.id_, is_input=True)
RAM_00_1 = c.gate(op.id_, is_input=True)
RAM_01_8 = c.gate(op.id_, is_input=True)
RAM_01_7 = c.gate(op.id_, is_input=True)
RAM_01_6 = c.gate(op.id_, is_input=True)
RAM_01_5 = c.gate(op.id_, is_input=True)
RAM_01_4 = c.gate(op.id_, is_input=True)
RAM_01_3 = c.gate(op.id_, is_input=True)
RAM_01_2 = c.gate(op.id_, is_input=True)
RAM_01_1 = c.gate(op.id_, is_input=True)
RAM_02_8 = c.gate(op.id_, is_input=True)
RAM_02_7 = c.gate(op.id_, is_input=True)
RAM_02_6 = c.gate(op.id_, is_input=True)
RAM_02_5 = c.gate(op.id_, is_input=True)
RAM_02_4 = c.gate(op.id_, is_input=True)
RAM_02_3 = c.gate(op.id_, is_input=True)
RAM_02_2 = c.gate(op.id_, is_input=True)
RAM_02_1 = c.gate(op.id_, is_input=True)
RAM_03_8 = c.gate(op.id_, is_input=True)
RAM_03_7 = c.gate(op.id_, is_input=True)
RAM_03_6 = c.gate(op.id_, is_input=True)
RAM_03_5 = c.gate(op.id_, is_input=True)
RAM_03_4 = c.gate(op.id_, is_input=True)
RAM_03_3 = c.gate(op.id_, is_input=True)
RAM_03_2 = c.gate(op.id_, is_input=True)
RAM_03_1 = c.gate(op.id_, is_input=True)
RAM_04_8 = c.gate(op.id_, is_input=True)
RAM_04_7 = c.gate(op.id_, is_input=True)
RAM_04_6 = c.gate(op.id_, is_input=True)
RAM_04_5 = c.gate(op.id_, is_input=True)
RAM_04_4 = c.gate(op.id_, is_input=True)
RAM_04_3 = c.gate(op.id_, is_input=True)
RAM_04_2 = c.gate(op.id_, is_input=True)
RAM_04_1 = c.gate(op.id_, is_input=True)
RAM_05_8 = c.gate(op.id_, is_input=True)
RAM_05_7 = c.gate(op.id_, is_input=True)
RAM_05_6 = c.gate(op.id_, is_input=True)
RAM_05_5 = c.gate(op.id_, is_input=True)
RAM_05_4 = c.gate(op.id_, is_input=True)
RAM_05_3 = c.gate(op.id_, is_input=True)
RAM_05_2 = c.gate(op.id_, is_input=True)
RAM_05_1 = c.gate(op.id_, is_input=True)
RAM_06_8 = c.gate(op.id_, is_input=True)
RAM_06_7 = c.gate(op.id_, is_input=True)
RAM_06_6 = c.gate(op.id_, is_input=True)
RAM_06_5 = c.gate(op.id_, is_input=True)
RAM_06_4 = c.gate(op.id_, is_input=True)
RAM_06_3 = c.gate(op.id_, is_input=True)
RAM_06_2 = c.gate(op.id_, is_input=True)
RAM_06_1 = c.gate(op.id_, is_input=True)
RAM_07_8 = c.gate(op.id_, is_input=True)
RAM_07_7 = c.gate(op.id_, is_input=True)
RAM_07_6 = c.gate(op.id_, is_input=True)
RAM_07_5 = c.gate(op.id_, is_input=True)
RAM_07_4 = c.gate(op.id_, is_input=True)
RAM_07_3 = c.gate(op.id_, is_input=True)
RAM_07_2 = c.gate(op.id_, is_input=True)
RAM_07_1 = c.gate(op.id_, is_input=True)
RAM_08_8 = c.gate(op.id_, is_input=True)
RAM_08_7 = c.gate(op.id_, is_input=True)
RAM_08_6 = c.gate(op.id_, is_input=True)
RAM_08_5 = c.gate(op.id_, is_input=True)
RAM_08_4 = c.gate(op.id_, is_input=True)
RAM_08_3 = c.gate(op.id_, is_input=True)
RAM_08_2 = c.gate(op.id_, is_input=True)
RAM_08_1 = c.gate(op.id_, is_input=True)
RAM_09_8 = c.gate(op.id_, is_input=True)
RAM_09_7 = c.gate(op.id_, is_input=True)
RAM_09_6 = c.gate(op.id_, is_input=True)
RAM_09_5 = c.gate(op.id_, is_input=True)
RAM_09_4 = c.gate(op.id_, is_input=True)
RAM_09_3 = c.gate(op.id_, is_input=True)
RAM_09_2 = c.gate(op.id_, is_input=True)
RAM_09_1 = c.gate(op.id_, is_input=True)
RAM_10_8 = c.gate(op.id_, is_input=True)
RAM_10_7 = c.gate(op.id_, is_input=True)
RAM_10_6 = c.gate(op.id_, is_input=True)
RAM_10_5 = c.gate(op.id_, is_input=True)
RAM_10_4 = c.gate(op.id_, is_input=True)
RAM_10_3 = c.gate(op.id_, is_input=True)
RAM_10_2 = c.gate(op.id_, is_input=True)
RAM_10_1 = c.gate(op.id_, is_input=True)
RAM_11_8 = c.gate(op.id_, is_input=True)
RAM_11_7 = c.gate(op.id_, is_input=True)
RAM_11_6 = c.gate(op.id_, is_input=True)
RAM_11_5 = c.gate(op.id_, is_input=True)
RAM_11_4 = c.gate(op.id_, is_input=True)
RAM_11_3 = c.gate(op.id_, is_input=True)
RAM_11_2 = c.gate(op.id_, is_input=True)
RAM_11_1 = c.gate(op.id_, is_input=True)
RAM_12_8 = c.gate(op.id_, is_input=True)
RAM_12_7 = c.gate(op.id_, is_input=True)
RAM_12_6 = c.gate(op.id_, is_input=True)
RAM_12_5 = c.gate(op.id_, is_input=True)
RAM_12_4 = c.gate(op.id_, is_input=True)
RAM_12_3 = c.gate(op.id_, is_input=True)
RAM_12_2 = c.gate(op.id_, is_input=True)
RAM_12_1 = c.gate(op.id_, is_input=True)
RAM_13_8 = c.gate(op.id_, is_input=True)
RAM_13_7 = c.gate(op.id_, is_input=True)
RAM_13_6 = c.gate(op.id_, is_input=True)
RAM_13_5 = c.gate(op.id_, is_input=True)
RAM_13_4 = c.gate(op.id_, is_input=True)
RAM_13_3 = c.gate(op.id_, is_input=True)
RAM_13_2 = c.gate(op.id_, is_input=True)
RAM_13_1 = c.gate(op.id_, is_input=True)
RAM_14_8 = c.gate(op.id_, is_input=True)
RAM_14_7 = c.gate(op.id_, is_input=True)
RAM_14_6 = c.gate(op.id_, is_input=True)
RAM_14_5 = c.gate(op.id_, is_input=True)
RAM_14_4 = c.gate(op.id_, is_input=True)
RAM_14_3 = c.gate(op.id_, is_input=True)
RAM_14_2 = c.gate(op.id_, is_input=True)
RAM_14_1 = c.gate(op.id_, is_input=True)
RAM_15_8 = c.gate(op.id_, is_input=True)
RAM_15_7 = c.gate(op.id_, is_input=True)
RAM_15_6 = c.gate(op.id_, is_input=True)
RAM_15_5 = c.gate(op.id_, is_input=True)
RAM_15_4 = c.gate(op.id_, is_input=True)
RAM_15_3 = c.gate(op.id_, is_input=True)
RAM_15_2 = c.gate(op.id_, is_input=True)
RAM_15_1 = c.gate(op.id_, is_input=True)
#debugging: turn on the following inputs
#(and the 8 debugging outputs near the
#bottom) to view the contents of the bus,
#which I find helps with debugging
# bus_init = c.gate(op.id_, is_input=True)
# bus_init = c.gate(op.id_, is_input=True)
# bus_init = c.gate(op.id_, is_input=True)
# bus_init = c.gate(op.id_, is_input=True)
# bus_init = c.gate(op.id_, is_input=True)
# bus_init = c.gate(op.id_, is_input=True)
# bus_init = c.gate(op.id_, is_input=True)
# bus_init = c.gate(op.id_, is_input=True)

#time definer
inverted_MC0 = c.gate(op.not_, [MC0])
inverted_MC1 = c.gate(op.not_, [MC1])
T0 = c.gate(op.nand_, [MC0, MC1])
T1 = c.gate(op.and_, [MC0, inverted_MC1])
T2 = c.gate(op.and_, [inverted_MC0, MC1])
T3 = c.gate(op.and_, [MC0, MC1])

#instruction register interpreter | Assembly decoder
inverted_IR8 = c.gate(op.not_, [IR8])
inverted_IR7 = c.gate(op.not_, [IR7])
inverted_IR6 = c.gate(op.not_, [IR6])
inverted_IR5 = c.gate(op.not_, [IR5])
IR_INT_AND_0 = c.gate(op.and_, [inverted_IR5, inverted_IR6])
IR_INT_AND_1 = c.gate(op.and_, [inverted_IR7, inverted_IR8])
NOP = c.gate(op.and_, [IR_INT_AND_0, IR_INT_AND_1])
IR_INT_AND_2 = c.gate(op.and_, [IR5, inverted_IR6])
IR_INT_AND_3 = c.gate(op.and_, [inverted_IR7, inverted_IR8])
LDA = c.gate(op.and_, [IR_INT_AND_2, IR_INT_AND_3])
IR_INT_AND_4 = c.gate(op.and_, [inverted_IR5, IR6])
IR_INT_AND_5 = c.gate(op.and_, [inverted_IR7, inverted_IR8])
ADD = c.gate(op.and_, [IR_INT_AND_4, IR_INT_AND_5])
IR_INT_AND_6 = c.gate(op.and_, [IR5, IR6])
IR_INT_AND_7 = c.gate(op.and_, [inverted_IR7, inverted_IR8])
SUB = c.gate(op.and_, [IR_INT_AND_6, IR_INT_AND_7])
IR_INT_AND_8 = c.gate(op.and_, [inverted_IR5, inverted_IR6])
IR_INT_AND_9 = c.gate(op.and_, [IR7, inverted_IR8])
STA = c.gate(op.and_, [IR_INT_AND_8, IR_INT_AND_9])
IR_INT_AND_10 = c.gate(op.and_, [IR5, inverted_IR6])
IR_INT_AND_11 = c.gate(op.and_, [IR7, inverted_IR8])
LDI = c.gate(op.and_, [IR_INT_AND_10, IR_INT_AND_11])
IR_INT_AND_12 = c.gate(op.and_, [inverted_IR5, IR6])
IR_INT_AND_13 = c.gate(op.and_, [IR7, inverted_IR8])
JMP = c.gate(op.and_, [IR_INT_AND_12, IR_INT_AND_13])
IR_INT_AND_14 = c.gate(op.and_, [IR5, IR6])
IR_INT_AND_15 = c.gate(op.and_, [IR7, inverted_IR8])
JIC_prep = c.gate(op.and_, [IR_INT_AND_14, IR_INT_AND_15])
JIC = c.gate(op.and_, [JIC_prep, initial_carry_out])
IR_INT_AND_31 = c.gate(op.and_, [IR5, IR6])
IR_INT_AND_32 = c.gate(op.and_, [IR7, IR8])
HLT = c.gate(op.and_, [IR_INT_AND_31, IR_INT_AND_32])

#bus flags and other flags
inverted_halt = c.gate(op.not_, [HLT])
bus_to_mem_AND_0 = c.gate(op.and_, [T2, ADD])
bus_to_mem_AND_1 = c.gate(op.and_, [T2, STA])
bus_to_mem_OR_0 = c.gate(op.or_, [bus_to_mem_AND_0, bus_to_mem_AND_1])
bus_to_mem_AND_2 = c.gate(op.and_, [T2, LDA])
bus_to_mem_AND_3 = c.gate(op.and_, [T2, SUB])
bus_to_mem_OR_1 = c.gate(op.or_, [bus_to_mem_OR_0, T0])
bus_to_mem_OR_2 = c.gate(op.or_, [bus_to_mem_AND_2, bus_to_mem_AND_3])
bus_to_mem = c.gate(op.or_, [bus_to_mem_OR_1, bus_to_mem_OR_2])
inverted_bus_to_mem = c.gate(op.not_, [bus_to_mem])
bus_to_ram = c.gate(op.and_, [T3, STA])
inverted_bus_to_ram = c.gate(op.not_, [bus_to_ram])
ram_to_bus_AND_0 = c.gate(op.and_, [T3, ADD])
ram_to_bus_OR_0 = c.gate(op.or_, [ram_to_bus_AND_0, T1])
ram_to_bus_AND_1 = c.gate(op.and_, [T3, LDA])
ram_to_bus_AND_2 = c.gate(op.and_, [T3, SUB])
ram_to_bus_OR_1 = c.gate(op.or_, [ram_to_bus_AND_1, ram_to_bus_AND_2])
ram_to_bus = c.gate(op.or_, [ram_to_bus_OR_0, ram_to_bus_OR_1])
inverted_ram_to_bus = c.gate(op.not_, [ram_to_bus])
ir_to_bus_AND_0 = c.gate(op.and_, [T2, LDA])
ir_to_bus_AND_1 = c.gate(op.and_, [T2, ADD])
ir_to_bus_OR_0 = c.gate(op.or_, [ir_to_bus_AND_0, ir_to_bus_AND_1])
ir_to_bus_AND_2 = c.gate(op.and_, [T2, SUB])
ir_to_bus_AND_3 = c.gate(op.and_, [T2, STA])
ir_to_bus_OR_1 = c.gate(op.or_, [ir_to_bus_AND_2, ir_to_bus_AND_3])
ir_to_bus_AND_4 = c.gate(op.and_, [T2, LDI])
ir_to_bus_AND_5 = c.gate(op.and_, [T2, JMP])
ir_to_bus_OR_2 = c.gate(op.or_, [ir_to_bus_AND_4, ir_to_bus_AND_5])
ir_to_bus_OR_3 = c.gate(op.or_, [ir_to_bus_OR_0, ir_to_bus_OR_1])
ir_to_bus_AND_6 = c.gate(op.and_, [T2, JIC])
ir_to_bus_OR_4 = c.gate(op.or_, [ir_to_bus_OR_2, ir_to_bus_AND_6])
ir_to_bus = c.gate(op.or_, [ir_to_bus_OR_3, ir_to_bus_OR_4])
inverted_ir_to_bus = c.gate(op.not_, [ir_to_bus])
#bus_to_ir = T1
inverted_bus_to_ir = c.gate(op.not_, [T1])
bus_to_A_AND_0 = c.gate(op.and_, [T3, LDA])
bus_to_A_AND_1 = c.gate(op.and_, [T2, LDI])
bus_to_A = c.gate(op.or_, [bus_to_A_AND_0, bus_to_A_AND_1])
inverted_bus_to_A = c.gate(op.not_, [bus_to_A])
A_to_bus = c.gate(op.and_, [T3, STA])
inverted_A_to_bus = c.gate(op.not_, [A_to_bus])
modify_A_AND_0 = c.gate(op.and_, [T3, ADD])
modify_A_AND_1 = c.gate(op.and_, [T3, SUB])
modify_A = c.gate(op.or_, [modify_A_AND_0, modify_A_AND_1])
inverted_modify_A = c.gate(op.not_, [modify_A])
invert_B = c.gate(op.and_, [T3, SUB])
inverted_invert_B = c.gate(op.not_, [invert_B])
bus_to_B_AND_0 = c.gate(op.and_, [T3, ADD])
bus_to_B_AND_1 = c.gate(op.and_, [T3, SUB])
bus_to_B = c.gate(op.or_, [bus_to_B_AND_0, bus_to_B_AND_1])
inverted_bus_to_B = c.gate(op.not_, [bus_to_B])
#increment_pc = T1
#TODO: this might change so keep the todo around
#so I can find it later if change is needed --
#it might change because right now increment_pc
#is solely set during T1, so I just set it to
#that, and now that it's time to invert it, I
#can just set its inverted value to be equal to
#the valueof an existing inverted version of that
#gate -- but if either one ends up being set by
#more complex logic, this might need to change
#inverted_increment_pc = inverted_bus_to_ir
mc_reset = c.gate(op.and_, [MC0, MC1])
inverted_mc_reset = c.gate(op.not_, [mc_reset])
#counter_to_bus = T0
inverted_counter_to_bus = c.gate(op.not_, [T0])
bus_to_counter_AND_0 = c.gate(op.and_, [T2, JMP])
bus_to_counter_AND_1 = c.gate(op.and_, [T2, JIC])
bus_to_counter = c.gate(op.or_, [bus_to_counter_AND_0, bus_to_counter_AND_1])
inverted_bus_to_counter = c.gate(op.not_, [bus_to_counter])
void_carry = c.gate(op.and_, [T3, JIC])
inverted_void_carry = c.gate(op.not_, [void_carry])

#memory address register
inverted_M3 = c.gate(op.not_, [M3])
inverted_M2 = c.gate(op.not_, [M2])
inverted_M1 = c.gate(op.not_, [M1])
inverted_M0 = c.gate(op.not_, [M0])

#ram reader
R15_reader_AND_0 = c.gate(op.and_, [ram_to_bus, M3])
R15_reader_AND_1 = c.gate(op.and_, [M2, M1])
R15_reader_AND_2 = c.gate(op.and_, [M0, R15_reader_AND_1])
R15_reader_AND_3 = c.gate(op.and_, [R15_reader_AND_0, R15_reader_AND_1])
en15 = c.gate(op.and_, [R15_reader_AND_2, R15_reader_AND_3])
R14_reader_AND_0 = c.gate(op.and_, [ram_to_bus, M3])
R14_reader_AND_1 = c.gate(op.and_, [M2, M1])
R14_reader_AND_2 = c.gate(op.and_, [inverted_M0, R14_reader_AND_1])
R14_reader_AND_3 = c.gate(op.and_, [R14_reader_AND_0, R14_reader_AND_1])
en14 = c.gate(op.and_, [R14_reader_AND_2, R14_reader_AND_3])
R13_reader_AND_0 = c.gate(op.and_, [ram_to_bus, M3])
R13_reader_AND_1 = c.gate(op.and_, [M2, inverted_M1])
R13_reader_AND_2 = c.gate(op.and_, [M0, R13_reader_AND_1])
R13_reader_AND_3 = c.gate(op.and_, [R13_reader_AND_0, R13_reader_AND_1])
en13 = c.gate(op.and_, [R13_reader_AND_2, R13_reader_AND_3])
R12_reader_AND_0 = c.gate(op.and_, [ram_to_bus, M3])
R12_reader_AND_1 = c.gate(op.and_, [M2, inverted_M1])
R12_reader_AND_2 = c.gate(op.and_, [inverted_M0, R12_reader_AND_1])
R12_reader_AND_3 = c.gate(op.and_, [R12_reader_AND_0, R12_reader_AND_1])
en12 = c.gate(op.and_, [R12_reader_AND_2, R12_reader_AND_3])
R11_reader_AND_0 = c.gate(op.and_, [ram_to_bus, M3])
R11_reader_AND_1 = c.gate(op.and_, [inverted_M2, M1])
R11_reader_AND_2 = c.gate(op.and_, [M0, R11_reader_AND_1])
R11_reader_AND_3 = c.gate(op.and_, [R11_reader_AND_0, R11_reader_AND_1])
en11 = c.gate(op.and_, [R11_reader_AND_2, R11_reader_AND_3])
R10_reader_AND_0 = c.gate(op.and_, [ram_to_bus, M3])
R10_reader_AND_1 = c.gate(op.and_, [inverted_M2, M1])
R10_reader_AND_2 = c.gate(op.and_, [inverted_M0, R10_reader_AND_1])
R10_reader_AND_3 = c.gate(op.and_, [R10_reader_AND_0, R10_reader_AND_1])
en10 = c.gate(op.and_, [R10_reader_AND_2, R10_reader_AND_3])
R09_reader_AND_0 = c.gate(op.and_, [ram_to_bus, M3])
R09_reader_AND_1 = c.gate(op.and_, [inverted_M2, inverted_M1])
R09_reader_AND_2 = c.gate(op.and_, [M0, R09_reader_AND_1])
R09_reader_AND_3 = c.gate(op.and_, [R09_reader_AND_0, R09_reader_AND_1])
en09 = c.gate(op.and_, [R09_reader_AND_2, R09_reader_AND_3])
R08_reader_AND_0 = c.gate(op.and_, [ram_to_bus, M3])
R08_reader_AND_1 = c.gate(op.and_, [inverted_M2, inverted_M1])
R08_reader_AND_2 = c.gate(op.and_, [inverted_M0, R08_reader_AND_1])
R08_reader_AND_3 = c.gate(op.and_, [R08_reader_AND_0, R08_reader_AND_1])
en08 = c.gate(op.and_, [R08_reader_AND_2, R08_reader_AND_3])
R07_reader_AND_0 = c.gate(op.and_, [ram_to_bus, inverted_M3])
R07_reader_AND_1 = c.gate(op.and_, [M2, M1])
R07_reader_AND_2 = c.gate(op.and_, [M0, R07_reader_AND_1])
R07_reader_AND_3 = c.gate(op.and_, [R07_reader_AND_0, R07_reader_AND_1])
en07 = c.gate(op.and_, [R07_reader_AND_2, R07_reader_AND_3])
R06_reader_AND_0 = c.gate(op.and_, [ram_to_bus, inverted_M3])
R06_reader_AND_1 = c.gate(op.and_, [M2, M1])
R06_reader_AND_2 = c.gate(op.and_, [inverted_M0, R06_reader_AND_1])
R06_reader_AND_3 = c.gate(op.and_, [R06_reader_AND_0, R06_reader_AND_1])
en06 = c.gate(op.and_, [R06_reader_AND_2, R06_reader_AND_3])
R05_reader_AND_0 = c.gate(op.and_, [ram_to_bus, inverted_M3])
R05_reader_AND_1 = c.gate(op.and_, [M2, inverted_M1])
R05_reader_AND_2 = c.gate(op.and_, [M0, R05_reader_AND_1])
R05_reader_AND_3 = c.gate(op.and_, [R05_reader_AND_0, R05_reader_AND_1])
en05 = c.gate(op.and_, [R05_reader_AND_2, R05_reader_AND_3])
R04_reader_AND_0 = c.gate(op.and_, [ram_to_bus, inverted_M3])
R04_reader_AND_1 = c.gate(op.and_, [M2, inverted_M1])
R04_reader_AND_2 = c.gate(op.and_, [inverted_M0, R04_reader_AND_1])
R04_reader_AND_3 = c.gate(op.and_, [R04_reader_AND_0, R04_reader_AND_1])
en04 = c.gate(op.and_, [R04_reader_AND_2, R04_reader_AND_3])
R03_reader_AND_0 = c.gate(op.and_, [ram_to_bus, inverted_M3])
R03_reader_AND_1 = c.gate(op.and_, [inverted_M2, M1])
R03_reader_AND_2 = c.gate(op.and_, [M0, R03_reader_AND_1])
R03_reader_AND_3 = c.gate(op.and_, [R03_reader_AND_0, R03_reader_AND_1])
en03 = c.gate(op.and_, [R03_reader_AND_2, R03_reader_AND_3])
R02_reader_AND_0 = c.gate(op.and_, [ram_to_bus, inverted_M3])
R02_reader_AND_1 = c.gate(op.and_, [inverted_M2, M1])
R02_reader_AND_2 = c.gate(op.and_, [inverted_M0, R02_reader_AND_1])
R02_reader_AND_3 = c.gate(op.and_, [R02_reader_AND_0, R02_reader_AND_1])
en02 = c.gate(op.and_, [R02_reader_AND_2, R02_reader_AND_3])
R01_reader_AND_0 = c.gate(op.and_, [ram_to_bus, inverted_M3])
R01_reader_AND_1 = c.gate(op.and_, [inverted_M2, inverted_M1])
R01_reader_AND_2 = c.gate(op.and_, [M0, R01_reader_AND_1])
R01_reader_AND_3 = c.gate(op.and_, [R01_reader_AND_0, R01_reader_AND_1])
en01 = c.gate(op.and_, [R01_reader_AND_2, R01_reader_AND_3])
R00_reader_AND_0 = c.gate(op.and_, [ram_to_bus, inverted_M3])
R00_reader_AND_1 = c.gate(op.and_, [inverted_M2, inverted_M1])
R00_reader_AND_2 = c.gate(op.and_, [inverted_M0, R00_reader_AND_1])
R00_reader_AND_3 = c.gate(op.and_, [R00_reader_AND_0, R00_reader_AND_1])
en00 = c.gate(op.and_, [R00_reader_AND_2, R00_reader_AND_3])

#ram writer
R15_writer_AND_0 = c.gate(op.and_, [bus_to_ram, M3])
R15_writer_AND_1 = c.gate(op.and_, [M2, M1])
R15_writer_AND_2 = c.gate(op.and_, [M0, R15_writer_AND_1])
R15_writer_AND_3 = c.gate(op.and_, [R15_writer_AND_0, R15_writer_AND_1])
wr15 = c.gate(op.and_, [R15_writer_AND_2, R15_writer_AND_3])
R14_writer_AND_0 = c.gate(op.and_, [bus_to_ram, M3])
R14_writer_AND_1 = c.gate(op.and_, [M2, M1])
R14_writer_AND_2 = c.gate(op.and_, [inverted_M0, R14_writer_AND_1])
R14_writer_AND_3 = c.gate(op.and_, [R14_writer_AND_0, R14_writer_AND_1])
wr14 = c.gate(op.and_, [R14_writer_AND_2, R14_writer_AND_3])
R13_writer_AND_0 = c.gate(op.and_, [bus_to_ram, M3])
R13_writer_AND_1 = c.gate(op.and_, [M2, inverted_M1])
R13_writer_AND_2 = c.gate(op.and_, [M0, R13_writer_AND_1])
R13_writer_AND_3 = c.gate(op.and_, [R13_writer_AND_0, R13_writer_AND_1])
wr13 = c.gate(op.and_, [R13_writer_AND_2, R13_writer_AND_3])
R12_writer_AND_0 = c.gate(op.and_, [bus_to_ram, M3])
R12_writer_AND_1 = c.gate(op.and_, [M2, inverted_M1])
R12_writer_AND_2 = c.gate(op.and_, [inverted_M0, R12_writer_AND_1])
R12_writer_AND_3 = c.gate(op.and_, [R12_writer_AND_0, R12_writer_AND_1])
wr12 = c.gate(op.and_, [R12_writer_AND_2, R12_writer_AND_3])
R11_writer_AND_0 = c.gate(op.and_, [bus_to_ram, M3])
R11_writer_AND_1 = c.gate(op.and_, [inverted_M2, M1])
R11_writer_AND_2 = c.gate(op.and_, [M0, R11_writer_AND_1])
R11_writer_AND_3 = c.gate(op.and_, [R11_writer_AND_0, R11_writer_AND_1])
wr11 = c.gate(op.and_, [R11_writer_AND_2, R11_writer_AND_3])
R10_writer_AND_0 = c.gate(op.and_, [bus_to_ram, M3])
R10_writer_AND_1 = c.gate(op.and_, [inverted_M2, M1])
R10_writer_AND_2 = c.gate(op.and_, [inverted_M0, R10_writer_AND_1])
R10_writer_AND_3 = c.gate(op.and_, [R10_writer_AND_0, R10_writer_AND_1])
wr10 = c.gate(op.and_, [R10_writer_AND_2, R10_writer_AND_3])
R09_writer_AND_0 = c.gate(op.and_, [bus_to_ram, M3])
R09_writer_AND_1 = c.gate(op.and_, [inverted_M2, inverted_M1])
R09_writer_AND_2 = c.gate(op.and_, [M0, R09_writer_AND_1])
R09_writer_AND_3 = c.gate(op.and_, [R09_writer_AND_0, R09_writer_AND_1])
wr09 = c.gate(op.and_, [R09_writer_AND_2, R09_writer_AND_3])
R08_writer_AND_0 = c.gate(op.and_, [bus_to_ram, M3])
R08_writer_AND_1 = c.gate(op.and_, [inverted_M2, inverted_M1])
R08_writer_AND_2 = c.gate(op.and_, [inverted_M0, R08_writer_AND_1])
R08_writer_AND_3 = c.gate(op.and_, [R08_writer_AND_0, R08_writer_AND_1])
wr08 = c.gate(op.and_, [R08_writer_AND_2, R08_writer_AND_3])
R07_writer_AND_0 = c.gate(op.and_, [bus_to_ram, inverted_M3])
R07_writer_AND_1 = c.gate(op.and_, [M2, M1])
R07_writer_AND_2 = c.gate(op.and_, [M0, R07_writer_AND_1])
R07_writer_AND_3 = c.gate(op.and_, [R07_writer_AND_0, R07_writer_AND_1])
wr07 = c.gate(op.and_, [R07_writer_AND_2, R07_writer_AND_3])
R06_writer_AND_0 = c.gate(op.and_, [bus_to_ram, inverted_M3])
R06_writer_AND_1 = c.gate(op.and_, [M2, M1])
R06_writer_AND_2 = c.gate(op.and_, [inverted_M0, R06_writer_AND_1])
R06_writer_AND_3 = c.gate(op.and_, [R06_writer_AND_0, R06_writer_AND_1])
wr06 = c.gate(op.and_, [R06_writer_AND_2, R06_writer_AND_3])
R05_writer_AND_0 = c.gate(op.and_, [bus_to_ram, inverted_M3])
R05_writer_AND_1 = c.gate(op.and_, [M2, inverted_M1])
R05_writer_AND_2 = c.gate(op.and_, [M0, R05_writer_AND_1])
R05_writer_AND_3 = c.gate(op.and_, [R05_writer_AND_0, R05_writer_AND_1])
wr05 = c.gate(op.and_, [R05_writer_AND_2, R05_writer_AND_3])
R04_writer_AND_0 = c.gate(op.and_, [bus_to_ram, inverted_M3])
R04_writer_AND_1 = c.gate(op.and_, [M2, inverted_M1])
R04_writer_AND_2 = c.gate(op.and_, [inverted_M0, R04_writer_AND_1])
R04_writer_AND_3 = c.gate(op.and_, [R04_writer_AND_0, R04_writer_AND_1])
wr04 = c.gate(op.and_, [R04_writer_AND_2, R04_writer_AND_3])
R03_writer_AND_0 = c.gate(op.and_, [bus_to_ram, inverted_M3])
R03_writer_AND_1 = c.gate(op.and_, [inverted_M2, M1])
R03_writer_AND_2 = c.gate(op.and_, [M0, R03_writer_AND_1])
R03_writer_AND_3 = c.gate(op.and_, [R03_writer_AND_0, R03_writer_AND_1])
wr03 = c.gate(op.and_, [R03_writer_AND_2, R03_writer_AND_3])
R02_writer_AND_0 = c.gate(op.and_, [bus_to_ram, inverted_M3])
R02_writer_AND_1 = c.gate(op.and_, [inverted_M2, M1])
R02_writer_AND_2 = c.gate(op.and_, [inverted_M0, R02_writer_AND_1])
R02_writer_AND_3 = c.gate(op.and_, [R02_writer_AND_0, R02_writer_AND_1])
wr02 = c.gate(op.and_, [R02_writer_AND_2, R02_writer_AND_3])
R01_writer_AND_0 = c.gate(op.and_, [bus_to_ram, inverted_M3])
R01_writer_AND_1 = c.gate(op.and_, [inverted_M2, inverted_M1])
R01_writer_AND_2 = c.gate(op.and_, [M0, R01_writer_AND_1])
R01_writer_AND_3 = c.gate(op.and_, [R01_writer_AND_0, R01_writer_AND_1])
wr01 = c.gate(op.and_, [R01_writer_AND_2, R01_writer_AND_3])
R00_writer_AND_0 = c.gate(op.and_, [bus_to_ram, inverted_M3])
R00_writer_AND_1 = c.gate(op.and_, [inverted_M2, inverted_M1])
R00_writer_AND_2 = c.gate(op.and_, [inverted_M0, R00_writer_AND_1])
R00_writer_AND_3 = c.gate(op.and_, [R00_writer_AND_0, R00_writer_AND_1])
wr00 = c.gate(op.and_, [R00_writer_AND_2, R00_writer_AND_3])

#ram selector prep
AND_15_8_plus_en15 = c.gate(op.and_, [RAM_15_8, en15])
AND_14_8_plus_en14 = c.gate(op.and_, [RAM_14_8, en14])
AND_13_8_plus_en13 = c.gate(op.and_, [RAM_13_8, en13])
AND_12_8_plus_en12 = c.gate(op.and_, [RAM_12_8, en12])
AND_11_8_plus_en11 = c.gate(op.and_, [RAM_11_8, en11])
AND_10_8_plus_en10 = c.gate(op.and_, [RAM_10_8, en10])
AND_09_8_plus_en09 = c.gate(op.and_, [RAM_09_8, en09])
AND_08_8_plus_en08 = c.gate(op.and_, [RAM_08_8, en08])
AND_07_8_plus_en07 = c.gate(op.and_, [RAM_07_8, en07])
AND_06_8_plus_en06 = c.gate(op.and_, [RAM_06_8, en06])
AND_05_8_plus_en05 = c.gate(op.and_, [RAM_05_8, en05])
AND_04_8_plus_en04 = c.gate(op.and_, [RAM_04_8, en04])
AND_03_8_plus_en03 = c.gate(op.and_, [RAM_03_8, en03])
AND_02_8_plus_en02 = c.gate(op.and_, [RAM_02_8, en02])
AND_01_8_plus_en01 = c.gate(op.and_, [RAM_01_8, en01])
AND_00_8_plus_en00 = c.gate(op.and_, [RAM_00_8, en00])
AND_15_7_plus_en15 = c.gate(op.and_, [RAM_15_7, en15])
AND_14_7_plus_en14 = c.gate(op.and_, [RAM_14_7, en14])
AND_13_7_plus_en13 = c.gate(op.and_, [RAM_13_7, en13])
AND_12_7_plus_en12 = c.gate(op.and_, [RAM_12_7, en12])
AND_11_7_plus_en11 = c.gate(op.and_, [RAM_11_7, en11])
AND_10_7_plus_en10 = c.gate(op.and_, [RAM_10_7, en10])
AND_09_7_plus_en09 = c.gate(op.and_, [RAM_09_7, en09])
AND_08_7_plus_en08 = c.gate(op.and_, [RAM_08_7, en08])
AND_07_7_plus_en07 = c.gate(op.and_, [RAM_07_7, en07])
AND_06_7_plus_en06 = c.gate(op.and_, [RAM_06_7, en06])
AND_05_7_plus_en05 = c.gate(op.and_, [RAM_05_7, en05])
AND_04_7_plus_en04 = c.gate(op.and_, [RAM_04_7, en04])
AND_03_7_plus_en03 = c.gate(op.and_, [RAM_03_7, en03])
AND_02_7_plus_en02 = c.gate(op.and_, [RAM_02_7, en02])
AND_01_7_plus_en01 = c.gate(op.and_, [RAM_01_7, en01])
AND_00_7_plus_en00 = c.gate(op.and_, [RAM_00_7, en00])
AND_15_6_plus_en15 = c.gate(op.and_, [RAM_15_6, en15])
AND_14_6_plus_en14 = c.gate(op.and_, [RAM_14_6, en14])
AND_13_6_plus_en13 = c.gate(op.and_, [RAM_13_6, en13])
AND_12_6_plus_en12 = c.gate(op.and_, [RAM_12_6, en12])
AND_11_6_plus_en11 = c.gate(op.and_, [RAM_11_6, en11])
AND_10_6_plus_en10 = c.gate(op.and_, [RAM_10_6, en10])
AND_09_6_plus_en09 = c.gate(op.and_, [RAM_09_6, en09])
AND_08_6_plus_en08 = c.gate(op.and_, [RAM_08_6, en08])
AND_07_6_plus_en07 = c.gate(op.and_, [RAM_07_6, en07])
AND_06_6_plus_en06 = c.gate(op.and_, [RAM_06_6, en06])
AND_05_6_plus_en05 = c.gate(op.and_, [RAM_05_6, en05])
AND_04_6_plus_en04 = c.gate(op.and_, [RAM_04_6, en04])
AND_03_6_plus_en03 = c.gate(op.and_, [RAM_03_6, en03])
AND_02_6_plus_en02 = c.gate(op.and_, [RAM_02_6, en02])
AND_01_6_plus_en01 = c.gate(op.and_, [RAM_01_6, en01])
AND_00_6_plus_en00 = c.gate(op.and_, [RAM_00_6, en00])
AND_15_5_plus_en15 = c.gate(op.and_, [RAM_15_5, en15])
AND_14_5_plus_en14 = c.gate(op.and_, [RAM_14_5, en14])
AND_13_5_plus_en13 = c.gate(op.and_, [RAM_13_5, en13])
AND_12_5_plus_en12 = c.gate(op.and_, [RAM_12_5, en12])
AND_11_5_plus_en11 = c.gate(op.and_, [RAM_11_5, en11])
AND_10_5_plus_en10 = c.gate(op.and_, [RAM_10_5, en10])
AND_09_5_plus_en09 = c.gate(op.and_, [RAM_09_5, en09])
AND_08_5_plus_en08 = c.gate(op.and_, [RAM_08_5, en08])
AND_07_5_plus_en07 = c.gate(op.and_, [RAM_07_5, en07])
AND_06_5_plus_en06 = c.gate(op.and_, [RAM_06_5, en06])
AND_05_5_plus_en05 = c.gate(op.and_, [RAM_05_5, en05])
AND_04_5_plus_en04 = c.gate(op.and_, [RAM_04_5, en04])
AND_03_5_plus_en03 = c.gate(op.and_, [RAM_03_5, en03])
AND_02_5_plus_en02 = c.gate(op.and_, [RAM_02_5, en02])
AND_01_5_plus_en01 = c.gate(op.and_, [RAM_01_5, en01])
AND_00_5_plus_en00 = c.gate(op.and_, [RAM_00_5, en00])
AND_15_4_plus_en15 = c.gate(op.and_, [RAM_15_4, en15])
AND_14_4_plus_en14 = c.gate(op.and_, [RAM_14_4, en14])
AND_13_4_plus_en13 = c.gate(op.and_, [RAM_13_4, en13])
AND_12_4_plus_en12 = c.gate(op.and_, [RAM_12_4, en12])
AND_11_4_plus_en11 = c.gate(op.and_, [RAM_11_4, en11])
AND_10_4_plus_en10 = c.gate(op.and_, [RAM_10_4, en10])
AND_09_4_plus_en09 = c.gate(op.and_, [RAM_09_4, en09])
AND_08_4_plus_en08 = c.gate(op.and_, [RAM_08_4, en08])
AND_07_4_plus_en07 = c.gate(op.and_, [RAM_07_4, en07])
AND_06_4_plus_en06 = c.gate(op.and_, [RAM_06_4, en06])
AND_05_4_plus_en05 = c.gate(op.and_, [RAM_05_4, en05])
AND_04_4_plus_en04 = c.gate(op.and_, [RAM_04_4, en04])
AND_03_4_plus_en03 = c.gate(op.and_, [RAM_03_4, en03])
AND_02_4_plus_en02 = c.gate(op.and_, [RAM_02_4, en02])
AND_01_4_plus_en01 = c.gate(op.and_, [RAM_01_4, en01])
AND_00_4_plus_en00 = c.gate(op.and_, [RAM_00_4, en00])
AND_15_3_plus_en15 = c.gate(op.and_, [RAM_15_3, en15])
AND_14_3_plus_en14 = c.gate(op.and_, [RAM_14_3, en14])
AND_13_3_plus_en13 = c.gate(op.and_, [RAM_13_3, en13])
AND_12_3_plus_en12 = c.gate(op.and_, [RAM_12_3, en12])
AND_11_3_plus_en11 = c.gate(op.and_, [RAM_11_3, en11])
AND_10_3_plus_en10 = c.gate(op.and_, [RAM_10_3, en10])
AND_09_3_plus_en09 = c.gate(op.and_, [RAM_09_3, en09])
AND_08_3_plus_en08 = c.gate(op.and_, [RAM_08_3, en08])
AND_07_3_plus_en07 = c.gate(op.and_, [RAM_07_3, en07])
AND_06_3_plus_en06 = c.gate(op.and_, [RAM_06_3, en06])
AND_05_3_plus_en05 = c.gate(op.and_, [RAM_05_3, en05])
AND_04_3_plus_en04 = c.gate(op.and_, [RAM_04_3, en04])
AND_03_3_plus_en03 = c.gate(op.and_, [RAM_03_3, en03])
AND_02_3_plus_en02 = c.gate(op.and_, [RAM_02_3, en02])
AND_01_3_plus_en01 = c.gate(op.and_, [RAM_01_3, en01])
AND_00_3_plus_en00 = c.gate(op.and_, [RAM_00_3, en00])
AND_15_2_plus_en15 = c.gate(op.and_, [RAM_15_2, en15])
AND_14_2_plus_en14 = c.gate(op.and_, [RAM_14_2, en14])
AND_13_2_plus_en13 = c.gate(op.and_, [RAM_13_2, en13])
AND_12_2_plus_en12 = c.gate(op.and_, [RAM_12_2, en12])
AND_11_2_plus_en11 = c.gate(op.and_, [RAM_11_2, en11])
AND_10_2_plus_en10 = c.gate(op.and_, [RAM_10_2, en10])
AND_09_2_plus_en09 = c.gate(op.and_, [RAM_09_2, en09])
AND_08_2_plus_en08 = c.gate(op.and_, [RAM_08_2, en08])
AND_07_2_plus_en07 = c.gate(op.and_, [RAM_07_2, en07])
AND_06_2_plus_en06 = c.gate(op.and_, [RAM_06_2, en06])
AND_05_2_plus_en05 = c.gate(op.and_, [RAM_05_2, en05])
AND_04_2_plus_en04 = c.gate(op.and_, [RAM_04_2, en04])
AND_03_2_plus_en03 = c.gate(op.and_, [RAM_03_2, en03])
AND_02_2_plus_en02 = c.gate(op.and_, [RAM_02_2, en02])
AND_01_2_plus_en01 = c.gate(op.and_, [RAM_01_2, en01])
AND_00_2_plus_en00 = c.gate(op.and_, [RAM_00_2, en00])
AND_15_1_plus_en15 = c.gate(op.and_, [RAM_15_1, en15])
AND_14_1_plus_en14 = c.gate(op.and_, [RAM_14_1, en14])
AND_13_1_plus_en13 = c.gate(op.and_, [RAM_13_1, en13])
AND_12_1_plus_en12 = c.gate(op.and_, [RAM_12_1, en12])
AND_11_1_plus_en11 = c.gate(op.and_, [RAM_11_1, en11])
AND_10_1_plus_en10 = c.gate(op.and_, [RAM_10_1, en10])
AND_09_1_plus_en09 = c.gate(op.and_, [RAM_09_1, en09])
AND_08_1_plus_en08 = c.gate(op.and_, [RAM_08_1, en08])
AND_07_1_plus_en07 = c.gate(op.and_, [RAM_07_1, en07])
AND_06_1_plus_en06 = c.gate(op.and_, [RAM_06_1, en06])
AND_05_1_plus_en05 = c.gate(op.and_, [RAM_05_1, en05])
AND_04_1_plus_en04 = c.gate(op.and_, [RAM_04_1, en04])
AND_03_1_plus_en03 = c.gate(op.and_, [RAM_03_1, en03])
AND_02_1_plus_en02 = c.gate(op.and_, [RAM_02_1, en02])
AND_01_1_plus_en01 = c.gate(op.and_, [RAM_01_1, en01])
AND_00_1_plus_en00 = c.gate(op.and_, [RAM_00_1, en00])

#ram8 selector
ram_8_AND_0 = c.gate(op.and_, [AND_15_8_plus_en15, M0])
ram_8_AND_1 = c.gate(op.and_, [AND_14_8_plus_en14, inverted_M0])
ram_8_OR_0 = c.gate(op.or_, [ram_8_AND_0, ram_8_AND_1])
ram_8_AND_2 = c.gate(op.and_, [AND_13_8_plus_en13, M0])
ram_8_AND_3 = c.gate(op.and_, [AND_12_8_plus_en12, inverted_M0])
ram_8_OR_1 = c.gate(op.or_, [ram_8_AND_2, ram_8_AND_3])
ram_8_AND_4 = c.gate(op.and_, [AND_11_8_plus_en11, M0])
ram_8_AND_5 = c.gate(op.and_, [AND_10_8_plus_en10, inverted_M0])
ram_8_OR_2 = c.gate(op.or_, [ram_8_AND_4, ram_8_AND_5])
ram_8_AND_6 = c.gate(op.and_, [AND_09_8_plus_en09, M0])
ram_8_AND_7 = c.gate(op.and_, [AND_08_8_plus_en08, inverted_M0])
ram_8_OR_3 = c.gate(op.or_, [ram_8_AND_6, ram_8_AND_7])
ram_8_AND_8 = c.gate(op.and_, [AND_07_8_plus_en07, M0])
ram_8_AND_9 = c.gate(op.and_, [AND_06_8_plus_en06, inverted_M0])
ram_8_OR_4 = c.gate(op.or_, [ram_8_AND_8, ram_8_AND_9])
ram_8_AND_10 = c.gate(op.and_, [AND_05_8_plus_en05, M0])
ram_8_AND_11 = c.gate(op.and_, [AND_04_8_plus_en04, inverted_M0])
ram_8_OR_5 = c.gate(op.or_, [ram_8_AND_10, ram_8_AND_11])
ram_8_AND_12 = c.gate(op.and_, [AND_03_8_plus_en03, M0])
ram_8_AND_13 = c.gate(op.and_, [AND_02_8_plus_en02, inverted_M0])
ram_8_OR_6 = c.gate(op.or_, [ram_8_AND_12, ram_8_AND_13])
ram_8_AND_14 = c.gate(op.and_, [AND_01_8_plus_en01, M0])
ram_8_AND_15 = c.gate(op.and_, [AND_00_8_plus_en00, inverted_M0])
ram_8_OR_7 = c.gate(op.or_, [ram_8_AND_14, ram_8_AND_15])
ram_8_AND_16 = c.gate(op.and_, [ram_8_OR_0, M1])
ram_8_AND_17 = c.gate(op.and_, [ram_8_OR_1, inverted_M1])
ram_8_OR_8 = c.gate(op.or_, [ram_8_AND_16, ram_8_AND_17])
ram_8_AND_18 = c.gate(op.and_, [ram_8_OR_2, M1])
ram_8_AND_19 = c.gate(op.and_, [ram_8_OR_3, inverted_M1])
ram_8_OR_9 = c.gate(op.or_, [ram_8_AND_18, ram_8_AND_19])
ram_8_AND_20 = c.gate(op.and_, [ram_8_OR_4, M1])
ram_8_AND_21 = c.gate(op.and_, [ram_8_OR_5, inverted_M1])
ram_8_OR_10 = c.gate(op.or_, [ram_8_AND_20, ram_8_AND_21])
ram_8_AND_22 = c.gate(op.and_, [ram_8_OR_6, M1])
ram_8_AND_23 = c.gate(op.and_, [ram_8_OR_7, inverted_M1])
ram_8_OR_11 = c.gate(op.or_, [ram_8_AND_22, ram_8_AND_23])
ram_8_AND_24 = c.gate(op.and_, [ram_8_OR_8, M2])
ram_8_AND_25 = c.gate(op.and_, [ram_8_OR_9, inverted_M2])
ram_8_OR_12 = c.gate(op.or_, [ram_8_AND_24, ram_8_AND_25])
ram_8_AND_26 = c.gate(op.and_, [ram_8_OR_10, M2])
ram_8_AND_27 = c.gate(op.and_, [ram_8_OR_11, inverted_M2])
ram_8_OR_13 = c.gate(op.or_, [ram_8_AND_26, ram_8_AND_27])
ram_8_AND_28 = c.gate(op.and_, [ram_8_OR_12, M3])
ram_8_AND_29 = c.gate(op.and_, [ram_8_OR_13, inverted_M3])
ram_8 = c.gate(op.or_, [ram_8_AND_28, ram_8_AND_29])

#ram7 selector
ram_7_AND_0 = c.gate(op.and_, [AND_15_7_plus_en15, M0])
ram_7_AND_1 = c.gate(op.and_, [AND_14_7_plus_en14, inverted_M0])
ram_7_OR_0 = c.gate(op.or_, [ram_7_AND_0, ram_7_AND_1])
ram_7_AND_2 = c.gate(op.and_, [AND_13_7_plus_en13, M0])
ram_7_AND_3 = c.gate(op.and_, [AND_12_7_plus_en12, inverted_M0])
ram_7_OR_1 = c.gate(op.or_, [ram_7_AND_2, ram_7_AND_3])
ram_7_AND_4 = c.gate(op.and_, [AND_11_7_plus_en11, M0])
ram_7_AND_5 = c.gate(op.and_, [AND_10_7_plus_en10, inverted_M0])
ram_7_OR_2 = c.gate(op.or_, [ram_7_AND_4, ram_7_AND_5])
ram_7_AND_6 = c.gate(op.and_, [AND_09_7_plus_en09, M0])
ram_7_AND_7 = c.gate(op.and_, [AND_08_7_plus_en08, inverted_M0])
ram_7_OR_3 = c.gate(op.or_, [ram_7_AND_6, ram_7_AND_7])
ram_7_AND_8 = c.gate(op.and_, [AND_07_7_plus_en07, M0])
ram_7_AND_9 = c.gate(op.and_, [AND_06_7_plus_en06, inverted_M0])
ram_7_OR_4 = c.gate(op.or_, [ram_7_AND_8, ram_7_AND_9])
ram_7_AND_10 = c.gate(op.and_, [AND_05_7_plus_en05, M0])
ram_7_AND_11 = c.gate(op.and_, [AND_04_7_plus_en04, inverted_M0])
ram_7_OR_5 = c.gate(op.or_, [ram_7_AND_10, ram_7_AND_11])
ram_7_AND_12 = c.gate(op.and_, [AND_03_7_plus_en03, M0])
ram_7_AND_13 = c.gate(op.and_, [AND_02_7_plus_en02, inverted_M0])
ram_7_OR_6 = c.gate(op.or_, [ram_7_AND_12, ram_7_AND_13])
ram_7_AND_14 = c.gate(op.and_, [AND_01_7_plus_en01, M0])
ram_7_AND_15 = c.gate(op.and_, [AND_00_7_plus_en00, inverted_M0])
ram_7_OR_7 = c.gate(op.or_, [ram_7_AND_14, ram_7_AND_15])
ram_7_AND_16 = c.gate(op.and_, [ram_7_OR_0, M1])
ram_7_AND_17 = c.gate(op.and_, [ram_7_OR_1, inverted_M1])
ram_7_OR_8 = c.gate(op.or_, [ram_7_AND_16, ram_7_AND_17])
ram_7_AND_18 = c.gate(op.and_, [ram_7_OR_2, M1])
ram_7_AND_19 = c.gate(op.and_, [ram_7_OR_3, inverted_M1])
ram_7_OR_9 = c.gate(op.or_, [ram_7_AND_18, ram_7_AND_19])
ram_7_AND_20 = c.gate(op.and_, [ram_7_OR_4, M1])
ram_7_AND_21 = c.gate(op.and_, [ram_7_OR_5, inverted_M1])
ram_7_OR_10 = c.gate(op.or_, [ram_7_AND_20, ram_7_AND_21])
ram_7_AND_22 = c.gate(op.and_, [ram_7_OR_6, M1])
ram_7_AND_23 = c.gate(op.and_, [ram_7_OR_7, inverted_M1])
ram_7_OR_11 = c.gate(op.or_, [ram_7_AND_22, ram_7_AND_23])
ram_7_AND_24 = c.gate(op.and_, [ram_7_OR_8, M2])
ram_7_AND_25 = c.gate(op.and_, [ram_7_OR_9, inverted_M2])
ram_7_OR_12 = c.gate(op.or_, [ram_7_AND_24, ram_7_AND_25])
ram_7_AND_26 = c.gate(op.and_, [ram_7_OR_10, M2])
ram_7_AND_27 = c.gate(op.and_, [ram_7_OR_11, inverted_M2])
ram_7_OR_13 = c.gate(op.or_, [ram_7_AND_26, ram_7_AND_27])
ram_7_AND_28 = c.gate(op.and_, [ram_7_OR_12, M3])
ram_7_AND_29 = c.gate(op.and_, [ram_7_OR_13, inverted_M3])
ram_7 = c.gate(op.or_, [ram_7_AND_28, ram_7_AND_29])

#ram6 selector
ram_6_AND_0 = c.gate(op.and_, [AND_15_6_plus_en15, M0])
ram_6_AND_1 = c.gate(op.and_, [AND_14_6_plus_en14, inverted_M0])
ram_6_OR_0 = c.gate(op.or_, [ram_6_AND_0, ram_6_AND_1])
ram_6_AND_2 = c.gate(op.and_, [AND_13_6_plus_en13, M0])
ram_6_AND_3 = c.gate(op.and_, [AND_12_6_plus_en12, inverted_M0])
ram_6_OR_1 = c.gate(op.or_, [ram_6_AND_2, ram_6_AND_3])
ram_6_AND_4 = c.gate(op.and_, [AND_11_6_plus_en11, M0])
ram_6_AND_5 = c.gate(op.and_, [AND_10_6_plus_en10, inverted_M0])
ram_6_OR_2 = c.gate(op.or_, [ram_6_AND_4, ram_6_AND_5])
ram_6_AND_6 = c.gate(op.and_, [AND_09_6_plus_en09, M0])
ram_6_AND_7 = c.gate(op.and_, [AND_08_6_plus_en08, inverted_M0])
ram_6_OR_3 = c.gate(op.or_, [ram_6_AND_6, ram_6_AND_7])
ram_6_AND_8 = c.gate(op.and_, [AND_07_6_plus_en07, M0])
ram_6_AND_9 = c.gate(op.and_, [AND_06_6_plus_en06, inverted_M0])
ram_6_OR_4 = c.gate(op.or_, [ram_6_AND_8, ram_6_AND_9])
ram_6_AND_10 = c.gate(op.and_, [AND_05_6_plus_en05, M0])
ram_6_AND_11 = c.gate(op.and_, [AND_04_6_plus_en04, inverted_M0])
ram_6_OR_5 = c.gate(op.or_, [ram_6_AND_10, ram_6_AND_11])
ram_6_AND_12 = c.gate(op.and_, [AND_03_6_plus_en03, M0])
ram_6_AND_13 = c.gate(op.and_, [AND_02_6_plus_en02, inverted_M0])
ram_6_OR_6 = c.gate(op.or_, [ram_6_AND_12, ram_6_AND_13])
ram_6_AND_14 = c.gate(op.and_, [AND_01_6_plus_en01, M0])
ram_6_AND_15 = c.gate(op.and_, [AND_00_6_plus_en00, inverted_M0])
ram_6_OR_7 = c.gate(op.or_, [ram_6_AND_14, ram_6_AND_15])
ram_6_AND_16 = c.gate(op.and_, [ram_6_OR_0, M1])
ram_6_AND_17 = c.gate(op.and_, [ram_6_OR_1, inverted_M1])
ram_6_OR_8 = c.gate(op.or_, [ram_6_AND_16, ram_6_AND_17])
ram_6_AND_18 = c.gate(op.and_, [ram_6_OR_2, M1])
ram_6_AND_19 = c.gate(op.and_, [ram_6_OR_3, inverted_M1])
ram_6_OR_9 = c.gate(op.or_, [ram_6_AND_18, ram_6_AND_19])
ram_6_AND_20 = c.gate(op.and_, [ram_6_OR_4, M1])
ram_6_AND_21 = c.gate(op.and_, [ram_6_OR_5, inverted_M1])
ram_6_OR_10 = c.gate(op.or_, [ram_6_AND_20, ram_6_AND_21])
ram_6_AND_22 = c.gate(op.and_, [ram_6_OR_6, M1])
ram_6_AND_23 = c.gate(op.and_, [ram_6_OR_7, inverted_M1])
ram_6_OR_11 = c.gate(op.or_, [ram_6_AND_22, ram_6_AND_23])
ram_6_AND_24 = c.gate(op.and_, [ram_6_OR_8, M2])
ram_6_AND_25 = c.gate(op.and_, [ram_6_OR_9, inverted_M2])
ram_6_OR_12 = c.gate(op.or_, [ram_6_AND_24, ram_6_AND_25])
ram_6_AND_26 = c.gate(op.and_, [ram_6_OR_10, M2])
ram_6_AND_27 = c.gate(op.and_, [ram_6_OR_11, inverted_M2])
ram_6_OR_13 = c.gate(op.or_, [ram_6_AND_26, ram_6_AND_27])
ram_6_AND_28 = c.gate(op.and_, [ram_6_OR_12, M3])
ram_6_AND_29 = c.gate(op.and_, [ram_6_OR_13, inverted_M3])
ram_6 = c.gate(op.or_, [ram_6_AND_28, ram_6_AND_29])

#ram5 selector
ram_5_AND_0 = c.gate(op.and_, [AND_15_5_plus_en15, M0])
ram_5_AND_1 = c.gate(op.and_, [AND_14_5_plus_en14, inverted_M0])
ram_5_OR_0 = c.gate(op.or_, [ram_5_AND_0, ram_5_AND_1])
ram_5_AND_2 = c.gate(op.and_, [AND_13_5_plus_en13, M0])
ram_5_AND_3 = c.gate(op.and_, [AND_12_5_plus_en12, inverted_M0])
ram_5_OR_1 = c.gate(op.or_, [ram_5_AND_2, ram_5_AND_3])
ram_5_AND_4 = c.gate(op.and_, [AND_11_5_plus_en11, M0])
ram_5_AND_5 = c.gate(op.and_, [AND_10_5_plus_en10, inverted_M0])
ram_5_OR_2 = c.gate(op.or_, [ram_5_AND_4, ram_5_AND_5])
ram_5_AND_6 = c.gate(op.and_, [AND_09_5_plus_en09, M0])
ram_5_AND_7 = c.gate(op.and_, [AND_08_5_plus_en08, inverted_M0])
ram_5_OR_3 = c.gate(op.or_, [ram_5_AND_6, ram_5_AND_7])
ram_5_AND_8 = c.gate(op.and_, [AND_07_5_plus_en07, M0])
ram_5_AND_9 = c.gate(op.and_, [AND_06_5_plus_en06, inverted_M0])
ram_5_OR_4 = c.gate(op.or_, [ram_5_AND_8, ram_5_AND_9])
ram_5_AND_10 = c.gate(op.and_, [AND_05_5_plus_en05, M0])
ram_5_AND_11 = c.gate(op.and_, [AND_04_5_plus_en04, inverted_M0])
ram_5_OR_5 = c.gate(op.or_, [ram_5_AND_10, ram_5_AND_11])
ram_5_AND_12 = c.gate(op.and_, [AND_03_5_plus_en03, M0])
ram_5_AND_13 = c.gate(op.and_, [AND_02_5_plus_en02, inverted_M0])
ram_5_OR_6 = c.gate(op.or_, [ram_5_AND_12, ram_5_AND_13])
ram_5_AND_14 = c.gate(op.and_, [AND_01_5_plus_en01, M0])
ram_5_AND_15 = c.gate(op.and_, [AND_00_5_plus_en00, inverted_M0])
ram_5_OR_7 = c.gate(op.or_, [ram_5_AND_14, ram_5_AND_15])
ram_5_AND_16 = c.gate(op.and_, [ram_5_OR_0, M1])
ram_5_AND_17 = c.gate(op.and_, [ram_5_OR_1, inverted_M1])
ram_5_OR_8 = c.gate(op.or_, [ram_5_AND_16, ram_5_AND_17])
ram_5_AND_18 = c.gate(op.and_, [ram_5_OR_2, M1])
ram_5_AND_19 = c.gate(op.and_, [ram_5_OR_3, inverted_M1])
ram_5_OR_9 = c.gate(op.or_, [ram_5_AND_18, ram_5_AND_19])
ram_5_AND_20 = c.gate(op.and_, [ram_5_OR_4, M1])
ram_5_AND_21 = c.gate(op.and_, [ram_5_OR_5, inverted_M1])
ram_5_OR_10 = c.gate(op.or_, [ram_5_AND_20, ram_5_AND_21])
ram_5_AND_22 = c.gate(op.and_, [ram_5_OR_6, M1])
ram_5_AND_23 = c.gate(op.and_, [ram_5_OR_7, inverted_M1])
ram_5_OR_11 = c.gate(op.or_, [ram_5_AND_22, ram_5_AND_23])
ram_5_AND_24 = c.gate(op.and_, [ram_5_OR_8, M2])
ram_5_AND_25 = c.gate(op.and_, [ram_5_OR_9, inverted_M2])
ram_5_OR_12 = c.gate(op.or_, [ram_5_AND_24, ram_5_AND_25])
ram_5_AND_26 = c.gate(op.and_, [ram_5_OR_10, M2])
ram_5_AND_27 = c.gate(op.and_, [ram_5_OR_11, inverted_M2])
ram_5_OR_13 = c.gate(op.or_, [ram_5_AND_26, ram_5_AND_27])
ram_5_AND_28 = c.gate(op.and_, [ram_5_OR_12, M3])
ram_5_AND_29 = c.gate(op.and_, [ram_5_OR_13, inverted_M3])
ram_5 = c.gate(op.or_, [ram_5_AND_28, ram_5_AND_29])

#ram4 selector
ram_4_AND_0 = c.gate(op.and_, [AND_15_4_plus_en15, M0])
ram_4_AND_1 = c.gate(op.and_, [AND_14_4_plus_en14, inverted_M0])
ram_4_OR_0 = c.gate(op.or_, [ram_4_AND_0, ram_4_AND_1])
ram_4_AND_2 = c.gate(op.and_, [AND_13_4_plus_en13, M0])
ram_4_AND_3 = c.gate(op.and_, [AND_12_4_plus_en12, inverted_M0])
ram_4_OR_1 = c.gate(op.or_, [ram_4_AND_2, ram_4_AND_3])
ram_4_AND_4 = c.gate(op.and_, [AND_11_4_plus_en11, M0])
ram_4_AND_5 = c.gate(op.and_, [AND_10_4_plus_en10, inverted_M0])
ram_4_OR_2 = c.gate(op.or_, [ram_4_AND_4, ram_4_AND_5])
ram_4_AND_6 = c.gate(op.and_, [AND_09_4_plus_en09, M0])
ram_4_AND_7 = c.gate(op.and_, [AND_08_4_plus_en08, inverted_M0])
ram_4_OR_3 = c.gate(op.or_, [ram_4_AND_6, ram_4_AND_7])
ram_4_AND_8 = c.gate(op.and_, [AND_07_4_plus_en07, M0])
ram_4_AND_9 = c.gate(op.and_, [AND_06_4_plus_en06, inverted_M0])
ram_4_OR_4 = c.gate(op.or_, [ram_4_AND_8, ram_4_AND_9])
ram_4_AND_10 = c.gate(op.and_, [AND_05_4_plus_en05, M0])
ram_4_AND_11 = c.gate(op.and_, [AND_04_4_plus_en04, inverted_M0])
ram_4_OR_5 = c.gate(op.or_, [ram_4_AND_10, ram_4_AND_11])
ram_4_AND_12 = c.gate(op.and_, [AND_03_4_plus_en03, M0])
ram_4_AND_13 = c.gate(op.and_, [AND_02_4_plus_en02, inverted_M0])
ram_4_OR_6 = c.gate(op.or_, [ram_4_AND_12, ram_4_AND_13])
ram_4_AND_14 = c.gate(op.and_, [AND_01_4_plus_en01, M0])
ram_4_AND_15 = c.gate(op.and_, [AND_00_4_plus_en00, inverted_M0])
ram_4_OR_7 = c.gate(op.or_, [ram_4_AND_14, ram_4_AND_15])
ram_4_AND_16 = c.gate(op.and_, [ram_4_OR_0, M1])
ram_4_AND_17 = c.gate(op.and_, [ram_4_OR_1, inverted_M1])
ram_4_OR_8 = c.gate(op.or_, [ram_4_AND_16, ram_4_AND_17])
ram_4_AND_18 = c.gate(op.and_, [ram_4_OR_2, M1])
ram_4_AND_19 = c.gate(op.and_, [ram_4_OR_3, inverted_M1])
ram_4_OR_9 = c.gate(op.or_, [ram_4_AND_18, ram_4_AND_19])
ram_4_AND_20 = c.gate(op.and_, [ram_4_OR_4, M1])
ram_4_AND_21 = c.gate(op.and_, [ram_4_OR_5, inverted_M1])
ram_4_OR_10 = c.gate(op.or_, [ram_4_AND_20, ram_4_AND_21])
ram_4_AND_22 = c.gate(op.and_, [ram_4_OR_6, M1])
ram_4_AND_23 = c.gate(op.and_, [ram_4_OR_7, inverted_M1])
ram_4_OR_11 = c.gate(op.or_, [ram_4_AND_22, ram_4_AND_23])
ram_4_AND_24 = c.gate(op.and_, [ram_4_OR_8, M2])
ram_4_AND_25 = c.gate(op.and_, [ram_4_OR_9, inverted_M2])
ram_4_OR_12 = c.gate(op.or_, [ram_4_AND_24, ram_4_AND_25])
ram_4_AND_26 = c.gate(op.and_, [ram_4_OR_10, M2])
ram_4_AND_27 = c.gate(op.and_, [ram_4_OR_11, inverted_M2])
ram_4_OR_13 = c.gate(op.or_, [ram_4_AND_26, ram_4_AND_27])
ram_4_AND_28 = c.gate(op.and_, [ram_4_OR_12, M3])
ram_4_AND_29 = c.gate(op.and_, [ram_4_OR_13, inverted_M3])
ram_4 = c.gate(op.or_, [ram_4_AND_28, ram_4_AND_29])

#ram3 selector
ram_3_AND_0 = c.gate(op.and_, [AND_15_3_plus_en15, M0])
ram_3_AND_1 = c.gate(op.and_, [AND_14_3_plus_en14, inverted_M0])
ram_3_OR_0 = c.gate(op.or_, [ram_3_AND_0, ram_3_AND_1])
ram_3_AND_2 = c.gate(op.and_, [AND_13_3_plus_en13, M0])
ram_3_AND_3 = c.gate(op.and_, [AND_12_3_plus_en12, inverted_M0])
ram_3_OR_1 = c.gate(op.or_, [ram_3_AND_2, ram_3_AND_3])
ram_3_AND_4 = c.gate(op.and_, [AND_11_3_plus_en11, M0])
ram_3_AND_5 = c.gate(op.and_, [AND_10_3_plus_en10, inverted_M0])
ram_3_OR_2 = c.gate(op.or_, [ram_3_AND_4, ram_3_AND_5])
ram_3_AND_6 = c.gate(op.and_, [AND_09_3_plus_en09, M0])
ram_3_AND_7 = c.gate(op.and_, [AND_08_3_plus_en08, inverted_M0])
ram_3_OR_3 = c.gate(op.or_, [ram_3_AND_6, ram_3_AND_7])
ram_3_AND_8 = c.gate(op.and_, [AND_07_3_plus_en07, M0])
ram_3_AND_9 = c.gate(op.and_, [AND_06_3_plus_en06, inverted_M0])
ram_3_OR_4 = c.gate(op.or_, [ram_3_AND_8, ram_3_AND_9])
ram_3_AND_10 = c.gate(op.and_, [AND_05_3_plus_en05, M0])
ram_3_AND_11 = c.gate(op.and_, [AND_04_3_plus_en04, inverted_M0])
ram_3_OR_5 = c.gate(op.or_, [ram_3_AND_10, ram_3_AND_11])
ram_3_AND_12 = c.gate(op.and_, [AND_03_3_plus_en03, M0])
ram_3_AND_13 = c.gate(op.and_, [AND_02_3_plus_en02, inverted_M0])
ram_3_OR_6 = c.gate(op.or_, [ram_3_AND_12, ram_3_AND_13])
ram_3_AND_14 = c.gate(op.and_, [AND_01_3_plus_en01, M0])
ram_3_AND_15 = c.gate(op.and_, [AND_00_3_plus_en00, inverted_M0])
ram_3_OR_7 = c.gate(op.or_, [ram_3_AND_14, ram_3_AND_15])
ram_3_AND_16 = c.gate(op.and_, [ram_3_OR_0, M1])
ram_3_AND_17 = c.gate(op.and_, [ram_3_OR_1, inverted_M1])
ram_3_OR_8 = c.gate(op.or_, [ram_3_AND_16, ram_3_AND_17])
ram_3_AND_18 = c.gate(op.and_, [ram_3_OR_2, M1])
ram_3_AND_19 = c.gate(op.and_, [ram_3_OR_3, inverted_M1])
ram_3_OR_9 = c.gate(op.or_, [ram_3_AND_18, ram_3_AND_19])
ram_3_AND_20 = c.gate(op.and_, [ram_3_OR_4, M1])
ram_3_AND_21 = c.gate(op.and_, [ram_3_OR_5, inverted_M1])
ram_3_OR_10 = c.gate(op.or_, [ram_3_AND_20, ram_3_AND_21])
ram_3_AND_22 = c.gate(op.and_, [ram_3_OR_6, M1])
ram_3_AND_23 = c.gate(op.and_, [ram_3_OR_7, inverted_M1])
ram_3_OR_11 = c.gate(op.or_, [ram_3_AND_22, ram_3_AND_23])
ram_3_AND_24 = c.gate(op.and_, [ram_3_OR_8, M2])
ram_3_AND_25 = c.gate(op.and_, [ram_3_OR_9, inverted_M2])
ram_3_OR_12 = c.gate(op.or_, [ram_3_AND_24, ram_3_AND_25])
ram_3_AND_26 = c.gate(op.and_, [ram_3_OR_10, M2])
ram_3_AND_27 = c.gate(op.and_, [ram_3_OR_11, inverted_M2])
ram_3_OR_13 = c.gate(op.or_, [ram_3_AND_26, ram_3_AND_27])
ram_3_AND_28 = c.gate(op.and_, [ram_3_OR_12, M3])
ram_3_AND_29 = c.gate(op.and_, [ram_3_OR_13, inverted_M3])
ram_3 = c.gate(op.or_, [ram_3_AND_28, ram_3_AND_29])

#ram2 selector
ram_2_AND_0 = c.gate(op.and_, [AND_15_2_plus_en15, M0])
ram_2_AND_1 = c.gate(op.and_, [AND_14_2_plus_en14, inverted_M0])
ram_2_OR_0 = c.gate(op.or_, [ram_2_AND_0, ram_2_AND_1])
ram_2_AND_2 = c.gate(op.and_, [AND_13_2_plus_en13, M0])
ram_2_AND_3 = c.gate(op.and_, [AND_12_2_plus_en12, inverted_M0])
ram_2_OR_1 = c.gate(op.or_, [ram_2_AND_2, ram_2_AND_3])
ram_2_AND_4 = c.gate(op.and_, [AND_11_2_plus_en11, M0])
ram_2_AND_5 = c.gate(op.and_, [AND_10_2_plus_en10, inverted_M0])
ram_2_OR_2 = c.gate(op.or_, [ram_2_AND_4, ram_2_AND_5])
ram_2_AND_6 = c.gate(op.and_, [AND_09_2_plus_en09, M0])
ram_2_AND_7 = c.gate(op.and_, [AND_08_2_plus_en08, inverted_M0])
ram_2_OR_3 = c.gate(op.or_, [ram_2_AND_6, ram_2_AND_7])
ram_2_AND_8 = c.gate(op.and_, [AND_07_2_plus_en07, M0])
ram_2_AND_9 = c.gate(op.and_, [AND_06_2_plus_en06, inverted_M0])
ram_2_OR_4 = c.gate(op.or_, [ram_2_AND_8, ram_2_AND_9])
ram_2_AND_10 = c.gate(op.and_, [AND_05_2_plus_en05, M0])
ram_2_AND_11 = c.gate(op.and_, [AND_04_2_plus_en04, inverted_M0])
ram_2_OR_5 = c.gate(op.or_, [ram_2_AND_10, ram_2_AND_11])
ram_2_AND_12 = c.gate(op.and_, [AND_03_2_plus_en03, M0])
ram_2_AND_13 = c.gate(op.and_, [AND_02_2_plus_en02, inverted_M0])
ram_2_OR_6 = c.gate(op.or_, [ram_2_AND_12, ram_2_AND_13])
ram_2_AND_14 = c.gate(op.and_, [AND_01_2_plus_en01, M0])
ram_2_AND_15 = c.gate(op.and_, [AND_00_2_plus_en00, inverted_M0])
ram_2_OR_7 = c.gate(op.or_, [ram_2_AND_14, ram_2_AND_15])
ram_2_AND_16 = c.gate(op.and_, [ram_2_OR_0, M1])
ram_2_AND_17 = c.gate(op.and_, [ram_2_OR_1, inverted_M1])
ram_2_OR_8 = c.gate(op.or_, [ram_2_AND_16, ram_2_AND_17])
ram_2_AND_18 = c.gate(op.and_, [ram_2_OR_2, M1])
ram_2_AND_19 = c.gate(op.and_, [ram_2_OR_3, inverted_M1])
ram_2_OR_9 = c.gate(op.or_, [ram_2_AND_18, ram_2_AND_19])
ram_2_AND_20 = c.gate(op.and_, [ram_2_OR_4, M1])
ram_2_AND_21 = c.gate(op.and_, [ram_2_OR_5, inverted_M1])
ram_2_OR_10 = c.gate(op.or_, [ram_2_AND_20, ram_2_AND_21])
ram_2_AND_22 = c.gate(op.and_, [ram_2_OR_6, M1])
ram_2_AND_23 = c.gate(op.and_, [ram_2_OR_7, inverted_M1])
ram_2_OR_11 = c.gate(op.or_, [ram_2_AND_22, ram_2_AND_23])
ram_2_AND_24 = c.gate(op.and_, [ram_2_OR_8, M2])
ram_2_AND_25 = c.gate(op.and_, [ram_2_OR_9, inverted_M2])
ram_2_OR_12 = c.gate(op.or_, [ram_2_AND_24, ram_2_AND_25])
ram_2_AND_26 = c.gate(op.and_, [ram_2_OR_10, M2])
ram_2_AND_27 = c.gate(op.and_, [ram_2_OR_11, inverted_M2])
ram_2_OR_13 = c.gate(op.or_, [ram_2_AND_26, ram_2_AND_27])
ram_2_AND_28 = c.gate(op.and_, [ram_2_OR_12, M3])
ram_2_AND_29 = c.gate(op.and_, [ram_2_OR_13, inverted_M3])
ram_2 = c.gate(op.or_, [ram_2_AND_28, ram_2_AND_29])

#ram1 selector
ram_1_AND_0 = c.gate(op.and_, [AND_15_1_plus_en15, M0])
ram_1_AND_1 = c.gate(op.and_, [AND_14_1_plus_en14, inverted_M0])
ram_1_OR_0 = c.gate(op.or_, [ram_1_AND_0, ram_1_AND_1])
ram_1_AND_2 = c.gate(op.and_, [AND_13_1_plus_en13, M0])
ram_1_AND_3 = c.gate(op.and_, [AND_12_1_plus_en12, inverted_M0])
ram_1_OR_1 = c.gate(op.or_, [ram_1_AND_2, ram_1_AND_3])
ram_1_AND_4 = c.gate(op.and_, [AND_11_1_plus_en11, M0])
ram_1_AND_5 = c.gate(op.and_, [AND_10_1_plus_en10, inverted_M0])
ram_1_OR_2 = c.gate(op.or_, [ram_1_AND_4, ram_1_AND_5])
ram_1_AND_6 = c.gate(op.and_, [AND_09_1_plus_en09, M0])
ram_1_AND_7 = c.gate(op.and_, [AND_08_1_plus_en08, inverted_M0])
ram_1_OR_3 = c.gate(op.or_, [ram_1_AND_6, ram_1_AND_7])
ram_1_AND_8 = c.gate(op.and_, [AND_07_1_plus_en07, M0])
ram_1_AND_9 = c.gate(op.and_, [AND_06_1_plus_en06, inverted_M0])
ram_1_OR_4 = c.gate(op.or_, [ram_1_AND_8, ram_1_AND_9])
ram_1_AND_10 = c.gate(op.and_, [AND_05_1_plus_en05, M0])
ram_1_AND_11 = c.gate(op.and_, [AND_04_1_plus_en04, inverted_M0])
ram_1_OR_5 = c.gate(op.or_, [ram_1_AND_10, ram_1_AND_11])
ram_1_AND_12 = c.gate(op.and_, [AND_03_1_plus_en03, M0])
ram_1_AND_13 = c.gate(op.and_, [AND_02_1_plus_en02, inverted_M0])
ram_1_OR_6 = c.gate(op.or_, [ram_1_AND_12, ram_1_AND_13])
ram_1_AND_14 = c.gate(op.and_, [AND_01_1_plus_en01, M0])
ram_1_AND_15 = c.gate(op.and_, [AND_00_1_plus_en00, inverted_M0])
ram_1_OR_7 = c.gate(op.or_, [ram_1_AND_14, ram_1_AND_15])
ram_1_AND_16 = c.gate(op.and_, [ram_1_OR_0, M1])
ram_1_AND_17 = c.gate(op.and_, [ram_1_OR_1, inverted_M1])
ram_1_OR_8 = c.gate(op.or_, [ram_1_AND_16, ram_1_AND_17])
ram_1_AND_18 = c.gate(op.and_, [ram_1_OR_2, M1])
ram_1_AND_19 = c.gate(op.and_, [ram_1_OR_3, inverted_M1])
ram_1_OR_9 = c.gate(op.or_, [ram_1_AND_18, ram_1_AND_19])
ram_1_AND_20 = c.gate(op.and_, [ram_1_OR_4, M1])
ram_1_AND_21 = c.gate(op.and_, [ram_1_OR_5, inverted_M1])
ram_1_OR_10 = c.gate(op.or_, [ram_1_AND_20, ram_1_AND_21])
ram_1_AND_22 = c.gate(op.and_, [ram_1_OR_6, M1])
ram_1_AND_23 = c.gate(op.and_, [ram_1_OR_7, inverted_M1])
ram_1_OR_11 = c.gate(op.or_, [ram_1_AND_22, ram_1_AND_23])
ram_1_AND_24 = c.gate(op.and_, [ram_1_OR_8, M2])
ram_1_AND_25 = c.gate(op.and_, [ram_1_OR_9, inverted_M2])
ram_1_OR_12 = c.gate(op.or_, [ram_1_AND_24, ram_1_AND_25])
ram_1_AND_26 = c.gate(op.and_, [ram_1_OR_10, M2])
ram_1_AND_27 = c.gate(op.and_, [ram_1_OR_11, inverted_M2])
ram_1_OR_13 = c.gate(op.or_, [ram_1_AND_26, ram_1_AND_27])
ram_1_AND_28 = c.gate(op.and_, [ram_1_OR_12, M3])
ram_1_AND_29 = c.gate(op.and_, [ram_1_OR_13, inverted_M3])
ram_1 = c.gate(op.or_, [ram_1_AND_28, ram_1_AND_29])

#ram to bus mux
ram_to_bus_8 = c.gate(op.and_, [ram_to_bus, ram_8])
ram_to_bus_7 = c.gate(op.and_, [ram_to_bus, ram_7])
ram_to_bus_6 = c.gate(op.and_, [ram_to_bus, ram_6])
ram_to_bus_5 = c.gate(op.and_, [ram_to_bus, ram_5])
ram_to_bus_4 = c.gate(op.and_, [ram_to_bus, ram_4])
ram_to_bus_3 = c.gate(op.and_, [ram_to_bus, ram_3])
ram_to_bus_2 = c.gate(op.and_, [ram_to_bus, ram_2])
ram_to_bus_1 = c.gate(op.and_, [ram_to_bus, ram_1])

#program counter incrementer
PC_INC_XNR_0 = c.gate(op.xnor_, [PC1, PC1])
PC_INC_AND_0 = c.gate(op.and_, [PC_INC_XNR_0, PC0])
PC_0_MUX_0 = c.gate(op.xor_, [PC_INC_XNR_0, PC0])
PC_INC_AND_1 = c.gate(op.and_, [PC_INC_AND_0, PC1])
PC_1_MUX_0 = c.gate(op.xor_, [PC_INC_AND_0, PC1])
PC_INC_AND_2 = c.gate(op.and_, [PC_INC_AND_1, PC2])
PC_2_MUX_0 = c.gate(op.xor_, [PC_INC_AND_1, PC2])
PC_3_MUX_0 = c.gate(op.xor_, [PC_INC_AND_2, PC3])

#PC stopper -- these muxes stop the counter from
#incrementing unless the increment_pc bit is set
PC_MUX_0_AND_0 = c.gate(op.and_, [PC_0_MUX_0, T1])
PC_MUX_0_AND_1 = c.gate(op.and_, [PC0, inverted_bus_to_ir])
PC_0_MUX_1 = c.gate(op.or_, [PC_MUX_0_AND_0, PC_MUX_0_AND_1])
PC_MUX_0_AND_2 = c.gate(op.and_, [PC_1_MUX_0, T1])
PC_MUX_0_AND_3 = c.gate(op.and_, [PC1, inverted_bus_to_ir])
PC_1_MUX_1 = c.gate(op.or_, [PC_MUX_0_AND_2, PC_MUX_0_AND_3])
PC_MUX_0_AND_4 = c.gate(op.and_, [PC_2_MUX_0, T1])
PC_MUX_0_AND_5 = c.gate(op.and_, [PC2, inverted_bus_to_ir])
PC_2_MUX_1 = c.gate(op.or_, [PC_MUX_0_AND_4, PC_MUX_0_AND_5])
PC_MUX_0_AND_6 = c.gate(op.and_, [PC_3_MUX_0, T1])
PC_MUX_0_AND_7 = c.gate(op.and_, [PC3, inverted_bus_to_ir])
PC_3_MUX_1 = c.gate(op.or_, [PC_MUX_0_AND_6, PC_MUX_0_AND_7])

#bus1
BUS_1_AND_0 = c.gate(op.and_, [T0, PC_0_MUX_1])
BUS_1_AND_1 = c.gate(op.and_, [inverted_ram_to_bus, BUS_1_AND_0])
BUS_1_AND_2 = c.gate(op.and_, [ram_to_bus, ram_to_bus_1])
BUS_1_OR_0 = c.gate(op.or_, [BUS_1_AND_1, BUS_1_AND_2])
BUS_1_AND_3 = c.gate(op.and_, [inverted_A_to_bus, IR1])
BUS_1_AND_4 = c.gate(op.and_, [A_to_bus, A1])
BUS_1_OR_1 = c.gate(op.or_, [BUS_1_AND_3, BUS_1_AND_4])
BUS_1_OR_2 = c.gate(op.or_, [ir_to_bus, A_to_bus])
inverted_BUS_1_OR_2 = c.gate(op.not_, [BUS_1_OR_2])
BUS_1_AND_5 = c.gate(op.and_, [inverted_BUS_1_OR_2, BUS_1_OR_0])
BUS_1_AND_6 = c.gate(op.and_, [BUS_1_OR_2, BUS_1_OR_1])
BUS_1 = c.gate(op.or_, [BUS_1_AND_5, BUS_1_AND_6])

#bus2
BUS_2_AND_0 = c.gate(op.and_, [T0, PC_1_MUX_1])
BUS_2_AND_1 = c.gate(op.and_, [inverted_ram_to_bus, BUS_2_AND_0])
BUS_2_AND_2 = c.gate(op.and_, [ram_to_bus, ram_to_bus_2])
BUS_2_OR_0 = c.gate(op.or_, [BUS_2_AND_1, BUS_2_AND_2])
BUS_2_AND_3 = c.gate(op.and_, [inverted_A_to_bus, IR2])
BUS_2_AND_4 = c.gate(op.and_, [A_to_bus, A2])
BUS_2_OR_1 = c.gate(op.or_, [BUS_2_AND_3, BUS_2_AND_4])
BUS_2_OR_2 = c.gate(op.or_, [ir_to_bus, A_to_bus])
inverted_BUS_2_OR_2 = c.gate(op.not_, [BUS_2_OR_2])
BUS_2_AND_5 = c.gate(op.and_, [inverted_BUS_2_OR_2, BUS_2_OR_0])
BUS_2_AND_6 = c.gate(op.and_, [BUS_2_OR_2, BUS_2_OR_1])
BUS_2 = c.gate(op.or_, [BUS_2_AND_5, BUS_2_AND_6])

#bus3
BUS_3_AND_0 = c.gate(op.and_, [T0, PC_2_MUX_1])
BUS_3_AND_1 = c.gate(op.and_, [inverted_ram_to_bus, BUS_3_AND_0])
BUS_3_AND_2 = c.gate(op.and_, [ram_to_bus, ram_to_bus_3])
BUS_3_OR_0 = c.gate(op.or_, [BUS_3_AND_1, BUS_3_AND_2])
BUS_3_AND_3 = c.gate(op.and_, [inverted_A_to_bus, IR3])
BUS_3_AND_4 = c.gate(op.and_, [A_to_bus, A3])
BUS_3_OR_1 = c.gate(op.or_, [BUS_3_AND_3, BUS_3_AND_4])
BUS_3_OR_2 = c.gate(op.or_, [ir_to_bus, A_to_bus])
inverted_BUS_3_OR_2 = c.gate(op.not_, [BUS_3_OR_2])
BUS_3_AND_5 = c.gate(op.and_, [inverted_BUS_3_OR_2, BUS_3_OR_0])
BUS_3_AND_6 = c.gate(op.and_, [BUS_3_OR_2, BUS_3_OR_1])
BUS_3 = c.gate(op.or_, [BUS_3_AND_5, BUS_3_AND_6])

#bus4
BUS_4_AND_0 = c.gate(op.and_, [T0, PC_3_MUX_1])
BUS_4_AND_1 = c.gate(op.and_, [inverted_ram_to_bus, BUS_4_AND_0])
BUS_4_AND_2 = c.gate(op.and_, [ram_to_bus, ram_to_bus_4])
BUS_4_OR_0 = c.gate(op.or_, [BUS_4_AND_1, BUS_4_AND_2])
BUS_4_AND_3 = c.gate(op.and_, [inverted_A_to_bus, IR4])
BUS_4_AND_4 = c.gate(op.and_, [A_to_bus, A4])
BUS_4_OR_1 = c.gate(op.or_, [BUS_4_AND_3, BUS_4_AND_4])
BUS_4_OR_2 = c.gate(op.or_, [ir_to_bus, A_to_bus])
inverted_BUS_4_OR_2 = c.gate(op.not_, [BUS_4_OR_2])
BUS_4_AND_5 = c.gate(op.and_, [inverted_BUS_4_OR_2, BUS_4_OR_0])
BUS_4_AND_6 = c.gate(op.and_, [BUS_4_OR_2, BUS_4_OR_1])
BUS_4 = c.gate(op.or_, [BUS_4_AND_5, BUS_4_AND_6])

#bus5
BUS_5_ZERO = c.gate(op.xor_, [ram_to_bus, ram_to_bus])
BUS_5_AND_2 = c.gate(op.and_, [ram_to_bus, ram_to_bus_5])
BUS_5_AND_3 = c.gate(op.and_, [inverted_A_to_bus, BUS_5_ZERO])
BUS_5_AND_4 = c.gate(op.and_, [A_to_bus, A5])
BUS_5_OR_1 = c.gate(op.or_, [BUS_5_AND_3, BUS_5_AND_4])
BUS_5_OR_2 = c.gate(op.or_, [ir_to_bus, A_to_bus])
inverted_BUS_5_OR_2 = c.gate(op.not_, [BUS_5_OR_2])
BUS_5_AND_5 = c.gate(op.and_, [inverted_BUS_5_OR_2, BUS_5_AND_2])
BUS_5_AND_6 = c.gate(op.and_, [BUS_5_OR_2, BUS_5_OR_1])
BUS_5 = c.gate(op.or_, [BUS_5_AND_5, BUS_5_AND_6])

#bus6
BUS_6_ZERO = c.gate(op.xor_, [ram_to_bus, ram_to_bus])
BUS_6_AND_2 = c.gate(op.and_, [ram_to_bus, ram_to_bus_6])
BUS_6_AND_3 = c.gate(op.and_, [inverted_A_to_bus, BUS_6_ZERO])
BUS_6_AND_4 = c.gate(op.and_, [A_to_bus, A6])
BUS_6_OR_1 = c.gate(op.or_, [BUS_6_AND_3, BUS_6_AND_4])
BUS_6_OR_2 = c.gate(op.or_, [ir_to_bus, A_to_bus])
inverted_BUS_6_OR_2 = c.gate(op.not_, [BUS_6_OR_2])
BUS_6_AND_5 = c.gate(op.and_, [inverted_BUS_6_OR_2, BUS_6_AND_2])
BUS_6_AND_6 = c.gate(op.and_, [BUS_6_OR_2, BUS_6_OR_1])
BUS_6 = c.gate(op.or_, [BUS_6_AND_5, BUS_6_AND_6])

#bus7
BUS_7_ZERO = c.gate(op.xor_, [ram_to_bus, ram_to_bus])
BUS_7_AND_2 = c.gate(op.and_, [ram_to_bus, ram_to_bus_7])
BUS_7_AND_3 = c.gate(op.and_, [inverted_A_to_bus, BUS_7_ZERO])
BUS_7_AND_4 = c.gate(op.and_, [A_to_bus, A7])
BUS_7_OR_1 = c.gate(op.or_, [BUS_7_AND_3, BUS_7_AND_4])
BUS_7_OR_2 = c.gate(op.or_, [ir_to_bus, A_to_bus])
inverted_BUS_7_OR_2 = c.gate(op.not_, [BUS_7_OR_2])
BUS_7_AND_5 = c.gate(op.and_, [inverted_BUS_7_OR_2, BUS_7_AND_2])
BUS_7_AND_6 = c.gate(op.and_, [BUS_7_OR_2, BUS_7_OR_1])
BUS_7 = c.gate(op.or_, [BUS_7_AND_5, BUS_7_AND_6])

#bus8
BUS_8_ZERO = c.gate(op.xor_, [ram_to_bus, ram_to_bus])
BUS_8_AND_2 = c.gate(op.and_, [ram_to_bus, ram_to_bus_8])
BUS_8_AND_3 = c.gate(op.and_, [inverted_A_to_bus, BUS_8_ZERO])
BUS_8_AND_4 = c.gate(op.and_, [A_to_bus, A8])
BUS_8_OR_1 = c.gate(op.or_, [BUS_8_AND_3, BUS_8_AND_4])
BUS_8_OR_2 = c.gate(op.or_, [ir_to_bus, A_to_bus])
inverted_BUS_8_OR_2 = c.gate(op.not_, [BUS_8_OR_2])
BUS_8_AND_5 = c.gate(op.and_, [inverted_BUS_8_OR_2, BUS_8_AND_2])
BUS_8_AND_6 = c.gate(op.and_, [BUS_8_OR_2, BUS_8_OR_1])
BUS_8 = c.gate(op.or_, [BUS_8_AND_5, BUS_8_AND_6])

#IR muxes -- these determine whether the IR contains
#its initial value or whatever is one the bus
IR_OUT_AND_0 = c.gate(op.and_, [BUS_1, T1])
IR_OUT_AND_1 = c.gate(op.and_, [IR1, inverted_bus_to_ir])
IR_1_out = c.gate(op.or_, [IR_OUT_AND_0, IR_OUT_AND_1])
IR_OUT_AND_2 = c.gate(op.and_, [BUS_2, T1])
IR_OUT_AND_3 = c.gate(op.and_, [IR2, inverted_bus_to_ir])
IR_2_out = c.gate(op.or_, [IR_OUT_AND_2, IR_OUT_AND_3])
IR_OUT_AND_4 = c.gate(op.and_, [BUS_3, T1])
IR_OUT_AND_5 = c.gate(op.and_, [IR3, inverted_bus_to_ir])
IR_3_out = c.gate(op.or_, [IR_OUT_AND_4, IR_OUT_AND_5])
IR_OUT_AND_6 = c.gate(op.and_, [BUS_4, T1])
IR_OUT_AND_7 = c.gate(op.and_, [IR4, inverted_bus_to_ir])
IR_4_out = c.gate(op.or_, [IR_OUT_AND_6, IR_OUT_AND_7])
IR_OUT_AND_8 = c.gate(op.and_, [BUS_5, T1])
IR_OUT_AND_9 = c.gate(op.and_, [IR5, inverted_bus_to_ir])
IR_5_out = c.gate(op.or_, [IR_OUT_AND_8, IR_OUT_AND_9])
IR_OUT_AND_10 = c.gate(op.and_, [BUS_6, T1])
IR_OUT_AND_11 = c.gate(op.and_, [IR6, inverted_bus_to_ir])
IR_6_out = c.gate(op.or_, [IR_OUT_AND_10, IR_OUT_AND_11])
IR_OUT_AND_12 = c.gate(op.and_, [BUS_7, T1])
IR_OUT_AND_13 = c.gate(op.and_, [IR7, inverted_bus_to_ir])
IR_7_out = c.gate(op.or_, [IR_OUT_AND_12, IR_OUT_AND_13])
IR_OUT_AND_14 = c.gate(op.and_, [BUS_8, T1])
IR_OUT_AND_15 = c.gate(op.and_, [IR8, inverted_bus_to_ir])
IR_8_out = c.gate(op.or_, [IR_OUT_AND_14, IR_OUT_AND_15])

#bus_to_mem muxes
BUS_TO_MEM_MUX_AND_0 = c.gate(op.and_, [BUS_1, bus_to_mem])
BUS_TO_MEM_MUX_AND_1 = c.gate(op.and_, [M0, inverted_bus_to_mem])
M0_OUT = c.gate(op.or_, [BUS_TO_MEM_MUX_AND_0, BUS_TO_MEM_MUX_AND_1])
BUS_TO_MEM_MUX_AND_2 = c.gate(op.and_, [BUS_2, bus_to_mem])
BUS_TO_MEM_MUX_AND_3 = c.gate(op.and_, [M1, inverted_bus_to_mem])
M1_OUT = c.gate(op.or_, [BUS_TO_MEM_MUX_AND_2, BUS_TO_MEM_MUX_AND_3])
BUS_TO_MEM_MUX_AND_4 = c.gate(op.and_, [BUS_3, bus_to_mem])
BUS_TO_MEM_MUX_AND_5 = c.gate(op.and_, [M2, inverted_bus_to_mem])
M2_OUT = c.gate(op.or_, [BUS_TO_MEM_MUX_AND_4, BUS_TO_MEM_MUX_AND_5])
BUS_TO_MEM_MUX_AND_6 = c.gate(op.and_, [BUS_4, bus_to_mem])
BUS_TO_MEM_MUX_AND_7 = c.gate(op.and_, [M3, inverted_bus_to_mem])
M3_OUT = c.gate(op.or_, [BUS_TO_MEM_MUX_AND_6, BUS_TO_MEM_MUX_AND_7])

#PC jump muxes -- these muxes let me set the
#counter to an arbitrary value, useful for jumps
JUMP_MUX_AND_0 = c.gate(op.and_, [BUS_1, bus_to_counter])
JUMP_MUX_AND_1 = c.gate(op.and_, [PC_0_MUX_1, inverted_bus_to_counter])
PC_0_OUT = c.gate(op.or_, [JUMP_MUX_AND_0, JUMP_MUX_AND_1])
JUMP_MUX_AND_2 = c.gate(op.and_, [BUS_2, bus_to_counter])
JUMP_MUX_AND_3 = c.gate(op.and_, [PC_1_MUX_1, inverted_bus_to_counter])
PC_1_OUT = c.gate(op.or_, [JUMP_MUX_AND_2, JUMP_MUX_AND_3])
JUMP_MUX_AND_4 = c.gate(op.and_, [BUS_3, bus_to_counter])
JUMP_MUX_AND_5 = c.gate(op.and_, [PC_2_MUX_1, inverted_bus_to_counter])
PC_2_OUT = c.gate(op.or_, [JUMP_MUX_AND_4, JUMP_MUX_AND_5])
JUMP_MUX_AND_6 = c.gate(op.and_, [BUS_4, bus_to_counter])
JUMP_MUX_AND_7 = c.gate(op.and_, [PC_3_MUX_1, inverted_bus_to_counter])
PC_3_OUT = c.gate(op.or_, [JUMP_MUX_AND_6, JUMP_MUX_AND_7])

#microinstruction counter incrementer
MC_1_MUX = c.gate(op.xor_, [MC0, MC1])

#microinstruction reset -- these reset the
#counter if the mc_reset bit is on
MC_0_HALTER = c.gate(op.and_, [inverted_mc_reset, inverted_MC0])

#microinstruction halter -- these stop the
#counter from incrementing if the halt bit is set
MC_HLT_AND_0 = c.gate(op.and_, [HLT, MC0])
MC_HLT_AND_1 = c.gate(op.and_, [inverted_halt, MC_0_HALTER])
MC_0_OUT = c.gate(op.or_, [MC_HLT_AND_0, MC_HLT_AND_1])
MC_HLT_AND_2 = c.gate(op.and_, [HLT, MC1])
MC_HLT_AND_3 = c.gate(op.and_, [inverted_halt, MC_1_MUX])
MC_1_OUT = c.gate(op.or_, [MC_HLT_AND_2, MC_HLT_AND_3])

#bus_to_B muxes
BUS_TO_B_AND_0 = c.gate(op.and_, [bus_to_B, BUS_1])
BUS_TO_B_AND_1 = c.gate(op.and_, [inverted_bus_to_B, pre_B1])
post_B1 = c.gate(op.or_, [BUS_TO_B_AND_0, BUS_TO_B_AND_1])
BUS_TO_B_AND_2 = c.gate(op.and_, [bus_to_B, BUS_2])
BUS_TO_B_AND_3 = c.gate(op.and_, [inverted_bus_to_B, pre_B2])
post_B2 = c.gate(op.or_, [BUS_TO_B_AND_2, BUS_TO_B_AND_3])
BUS_TO_B_AND_4 = c.gate(op.and_, [bus_to_B, BUS_3])
BUS_TO_B_AND_5 = c.gate(op.and_, [inverted_bus_to_B, pre_B3])
post_B3 = c.gate(op.or_, [BUS_TO_B_AND_4, BUS_TO_B_AND_5])
BUS_TO_B_AND_6 = c.gate(op.and_, [bus_to_B, BUS_4])
BUS_TO_B_AND_7 = c.gate(op.and_, [inverted_bus_to_B, pre_B4])
post_B4 = c.gate(op.or_, [BUS_TO_B_AND_6, BUS_TO_B_AND_7])
BUS_TO_B_AND_8 = c.gate(op.and_, [bus_to_B, BUS_5])
BUS_TO_B_AND_9 = c.gate(op.and_, [inverted_bus_to_B, pre_B5])
post_B5 = c.gate(op.or_, [BUS_TO_B_AND_8, BUS_TO_B_AND_9])
BUS_TO_B_AND_10 = c.gate(op.and_, [bus_to_B, BUS_6])
BUS_TO_B_AND_11 = c.gate(op.and_, [inverted_bus_to_B, pre_B6])
post_B6 = c.gate(op.or_, [BUS_TO_B_AND_10, BUS_TO_B_AND_11])
BUS_TO_B_AND_12 = c.gate(op.and_, [bus_to_B, BUS_7])
BUS_TO_B_AND_13 = c.gate(op.and_, [inverted_bus_to_B, pre_B7])
post_B7 = c.gate(op.or_, [BUS_TO_B_AND_12, BUS_TO_B_AND_13])
BUS_TO_B_AND_14 = c.gate(op.and_, [bus_to_B, BUS_8])
BUS_TO_B_AND_15 = c.gate(op.and_, [inverted_bus_to_B, pre_B8])
post_B8 = c.gate(op.or_, [BUS_TO_B_AND_14, BUS_TO_B_AND_15])

#inversion of register B
inverted_B1 = c.gate(op.not_, [post_B1])
inverted_B2 = c.gate(op.not_, [post_B2])
inverted_B3 = c.gate(op.not_, [post_B3])
inverted_B4 = c.gate(op.not_, [post_B4])
inverted_B5 = c.gate(op.not_, [post_B5])
inverted_B6 = c.gate(op.not_, [post_B6])
inverted_B7 = c.gate(op.not_, [post_B7])
inverted_B8 = c.gate(op.not_, [post_B8])

#B1_inverter
first_B1_and = c.gate(op.and_, [inverted_B1, invert_B])
second_B1_and = c.gate(op.and_, [inverted_invert_B, post_B1])
B1 = c.gate(op.or_, [first_B1_and, second_B1_and])
#B2_inverter
first_B2_and = c.gate(op.and_, [inverted_B2, invert_B])
second_B2_and = c.gate(op.and_, [inverted_invert_B, post_B2])
B2 = c.gate(op.or_, [first_B2_and, second_B2_and])
#B3_inverter
first_B3_and = c.gate(op.and_, [inverted_B3, invert_B])
second_B3_and = c.gate(op.and_, [inverted_invert_B, post_B3])
B3 = c.gate(op.or_, [first_B3_and, second_B3_and])
#B4_inverter
first_B4_and = c.gate(op.and_, [inverted_B4, invert_B])
second_B4_and = c.gate(op.and_, [inverted_invert_B, post_B4])
B4 = c.gate(op.or_, [first_B4_and, second_B4_and])
#B5_inverter
first_B5_and = c.gate(op.and_, [inverted_B5, invert_B])
second_B5_and = c.gate(op.and_, [inverted_invert_B, post_B5])
B5 = c.gate(op.or_, [first_B5_and, second_B5_and])
#B6_inverter
first_B6_and = c.gate(op.and_, [inverted_B6, invert_B])
second_B6_and = c.gate(op.and_, [inverted_invert_B, post_B6])
B6 = c.gate(op.or_, [first_B6_and, second_B6_and])
#B7_inverter
first_B7_and = c.gate(op.and_, [inverted_B7, invert_B])
second_B7_and = c.gate(op.and_, [inverted_invert_B, post_B7])
B7 = c.gate(op.or_, [first_B7_and, second_B7_and])
#B8_inverter
first_B8_and = c.gate(op.and_, [inverted_B8, invert_B])
second_B8_and = c.gate(op.and_, [inverted_invert_B, post_B8])
B8 = c.gate(op.or_, [first_B8_and, second_B8_and])

#bus_to_A muxes
BUS_TO_A_AND_0 = c.gate(op.and_, [bus_to_A, BUS_1])
BUS_TO_A_AND_1 = c.gate(op.and_, [inverted_bus_to_A, A1])
post_A1 = c.gate(op.or_, [BUS_TO_A_AND_0, BUS_TO_A_AND_1])
BUS_TO_A_AND_2 = c.gate(op.and_, [bus_to_A, BUS_2])
BUS_TO_A_AND_3 = c.gate(op.and_, [inverted_bus_to_A, A2])
post_A2 = c.gate(op.or_, [BUS_TO_A_AND_2, BUS_TO_A_AND_3])
BUS_TO_A_AND_4 = c.gate(op.and_, [bus_to_A, BUS_3])
BUS_TO_A_AND_5 = c.gate(op.and_, [inverted_bus_to_A, A3])
post_A3 = c.gate(op.or_, [BUS_TO_A_AND_4, BUS_TO_A_AND_5])
BUS_TO_A_AND_6 = c.gate(op.and_, [bus_to_A, BUS_4])
BUS_TO_A_AND_7 = c.gate(op.and_, [inverted_bus_to_A, A4])
post_A4 = c.gate(op.or_, [BUS_TO_A_AND_6, BUS_TO_A_AND_7])
BUS_TO_A_AND_8 = c.gate(op.and_, [bus_to_A, BUS_5])
BUS_TO_A_AND_9 = c.gate(op.and_, [inverted_bus_to_A, A5])
post_A5 = c.gate(op.or_, [BUS_TO_A_AND_8, BUS_TO_A_AND_9])
BUS_TO_A_AND_10 = c.gate(op.and_, [bus_to_A, BUS_6])
BUS_TO_A_AND_11 = c.gate(op.and_, [inverted_bus_to_A, A6])
post_A6 = c.gate(op.or_, [BUS_TO_A_AND_10, BUS_TO_A_AND_11])
BUS_TO_A_AND_12 = c.gate(op.and_, [bus_to_A, BUS_7])
BUS_TO_A_AND_13 = c.gate(op.and_, [inverted_bus_to_A, A7])
post_A7 = c.gate(op.or_, [BUS_TO_A_AND_12, BUS_TO_A_AND_13])
BUS_TO_A_AND_14 = c.gate(op.and_, [bus_to_A, BUS_8])
BUS_TO_A_AND_15 = c.gate(op.and_, [inverted_bus_to_A, A8])
post_A8 = c.gate(op.or_, [BUS_TO_A_AND_14, BUS_TO_A_AND_15])

#only pass A and B into the alu if the modify_A bit is set
g0 = c.gate(op.and_, [A1, modify_A])
g1 = c.gate(op.and_, [A2, modify_A])
g2 = c.gate(op.and_, [A3, modify_A])
g3 = c.gate(op.and_, [A4, modify_A])
g4 = c.gate(op.and_, [A5, modify_A])
g5 = c.gate(op.and_, [A6, modify_A])
g6 = c.gate(op.and_, [A7, modify_A])
g7 = c.gate(op.and_, [A8, modify_A])
g8 = c.gate(op.and_, [B1, modify_A])
g9 = c.gate(op.and_, [B2, modify_A])
g10 = c.gate(op.and_, [B3, modify_A])
g11 = c.gate(op.and_, [B4, modify_A])
g12 = c.gate(op.and_, [B5, modify_A])
g13 = c.gate(op.and_, [B6, modify_A])
g14 = c.gate(op.and_, [B7, modify_A])
g15 = c.gate(op.and_, [B8, modify_A])

#first_4bit_adder
#set1
g16 = c.gate(op.and_, [invert_B, g0])
g17 = c.gate(op.xor_, [invert_B, g0])
g18 = c.gate(op.and_, [g17, g8])
#1s place
g19 = c.gate(op.xor_, [g17, g8])
#adder-1-to-adder-2
g20 = c.gate(op.or_, [g16, g18])
#set2
g21 = c.gate(op.and_, [g20, g1])
g22 = c.gate(op.xor_, [g20, g1])
g23 = c.gate(op.and_, [g22, g9])
#2s place
g24 = c.gate(op.xor_, [g22, g9])
#adder-2-to-adder-3
g25 = c.gate(op.or_, [g21, g23])
#set3
g26 = c.gate(op.and_, [g25, g2])
g27 = c.gate(op.xor_, [g25, g2])
g28 = c.gate(op.and_, [g27, g10])
#4s place
g29 = c.gate(op.xor_, [g27, g10])
#adder-3-to-adder-4
g30 = c.gate(op.or_, [g26, g28])
#set4
g31 = c.gate(op.and_, [g30, g3])
g32 = c.gate(op.xor_, [g30, g3])
g33 = c.gate(op.and_, [g32, g11])
#8s place
g34 = c.gate(op.xor_, [g32, g11])
#carry out to second 4bit adder
g35 = c.gate(op.or_, [g31, g33])

#second_4bit_adder
#set5
g36 = c.gate(op.and_, [g35, g4])
g37 = c.gate(op.xor_, [g35, g4])
g38 = c.gate(op.and_, [g37, g12])
#16s place
g39 = c.gate(op.xor_, [g37, g12])
#adder-5-to-adder-6
g40 = c.gate(op.or_, [g36, g38])
#set2
g41 = c.gate(op.and_, [g40, g5])
g42 = c.gate(op.xor_, [g40, g5])
g43 = c.gate(op.and_, [g42, g13])
#32s place
g44 = c.gate(op.xor_, [g42, g13])
#adder-6-to-adder-7
g45 = c.gate(op.or_, [g41, g43])
#set3
g46 = c.gate(op.and_, [g45, g6])
g47 = c.gate(op.xor_, [g45, g6])
g48 = c.gate(op.and_, [g47, g14])
#64s place
g49 = c.gate(op.xor_, [g47, g14])
#adder-7-to-adder-8
g50 = c.gate(op.or_, [g46, g48])
#set4
g51 = c.gate(op.and_, [g50, g7])
g52 = c.gate(op.xor_, [g50, g7])
g53 = c.gate(op.and_, [g52, g15])
#128s place
g54 = c.gate(op.xor_, [g52, g15])
#carry out to inverter
g55 = c.gate(op.or_, [g51, g53])

#set the modify_A bit to 0
modify_A_out = c.gate(op.xor_, [modify_A, modify_A])

#set the operation bit to 0
invert_B_out = c.gate(op.xor_, [invert_B, invert_B])

#set carry flag
#if g55 is on, the carry flag should definitely be on
#otherwise, if void_carry is off, it should be whatever
#initial_carry_in is
#but if void_carry is on and g55 is off, the carry flag should be off
#g55 void_carry initial_carry | carry_out
# 0      0           0        |     0
# 0      0           1        |     1 <-- this one needs to be on so
# 0      1           0        |     0     that the state of the carry
# 0      1           1        |     0     gets passed through to JIC
# 1      0           0        |     1     if necessary, since that
# 1      0           1        |     1     always happens on a micro-
# 1      1           0        |     1     instruction AFTER an add-
# 1      1           1        |     1     ition has taken place
# I can do that with this: g55 || (!void AND initial)
carry_AND = c.gate(op.and_, [inverted_void_carry, initial_carry_out])
carry_out = c.gate(op.or_, [g55, carry_AND])

#if modify_A is set, pass the alu's result to A_output,
#otherwise pass A_input to A_output unchanged
#A1_selector
first_A1_and = c.gate(op.and_, [g19, modify_A])
second_A1_and = c.gate(op.and_, [inverted_modify_A, post_A1])
A1_out = c.gate(op.or_, [first_A1_and, second_A1_and])
#A2_inverter
first_A2_and = c.gate(op.and_, [g24, modify_A])
second_A2_and = c.gate(op.and_, [inverted_modify_A, post_A2])
A2_out = c.gate(op.or_, [first_A2_and, second_A2_and])
#B3_inverter
first_A3_and = c.gate(op.and_, [g29, modify_A])
second_A3_and = c.gate(op.and_, [inverted_modify_A, post_A3])
A3_out = c.gate(op.or_, [first_A3_and, second_A3_and])
#B4_inverter
first_A4_and = c.gate(op.and_, [g34, modify_A])
second_A4_and = c.gate(op.and_, [inverted_modify_A, post_A4])
A4_out = c.gate(op.or_, [first_A4_and, second_A4_and])
#B5_inverter
first_A5_and = c.gate(op.and_, [g39, modify_A])
second_A5_and = c.gate(op.and_, [inverted_modify_A, post_A5])
A5_out = c.gate(op.or_, [first_A5_and, second_A5_and])
#B6_inverter
first_A6_and = c.gate(op.and_, [g44, modify_A])
second_A6_and = c.gate(op.and_, [inverted_modify_A, post_A6])
A6_out = c.gate(op.or_, [first_A6_and, second_A6_and])
#B7_inverter
first_A7_and = c.gate(op.and_, [g49, modify_A])
second_A7_and = c.gate(op.and_, [inverted_modify_A, post_A7])
A7_out = c.gate(op.or_, [first_A7_and, second_A7_and])
#B8_inverter
first_A8_and = c.gate(op.and_, [g54, modify_A])
second_A8_and = c.gate(op.and_, [inverted_modify_A, post_A8])
A8_out = c.gate(op.or_, [first_A8_and, second_A8_and])

#memory muxers -- these muxes put whatever is on the bus
#into whatever memory address is selected
inverted_wr00 = c.gate(op.not_, [wr00])
inverted_wr01 = c.gate(op.not_, [wr01])
inverted_wr02 = c.gate(op.not_, [wr02])
inverted_wr03 = c.gate(op.not_, [wr03])
inverted_wr04 = c.gate(op.not_, [wr04])
inverted_wr05 = c.gate(op.not_, [wr05])
inverted_wr06 = c.gate(op.not_, [wr06])
inverted_wr07 = c.gate(op.not_, [wr07])
inverted_wr08 = c.gate(op.not_, [wr08])
inverted_wr09 = c.gate(op.not_, [wr09])
inverted_wr10 = c.gate(op.not_, [wr10])
inverted_wr11 = c.gate(op.not_, [wr11])
inverted_wr12 = c.gate(op.not_, [wr12])
inverted_wr13 = c.gate(op.not_, [wr13])
inverted_wr14 = c.gate(op.not_, [wr14])
inverted_wr15 = c.gate(op.not_, [wr15])

MUX_00_AND_0 = c.gate(op.and_, [wr00, BUS_1])
MUX_00_AND_1 = c.gate(op.and_, [inverted_wr00, RAM_00_1])
RAM_00_1_out = c.gate(op.or_, [MUX_00_AND_0, MUX_00_AND_1])

MUX_00_AND_1 = c.gate(op.and_, [wr00, BUS_2])
MUX_00_AND_2 = c.gate(op.and_, [inverted_wr00, RAM_00_2])
RAM_00_2_out = c.gate(op.or_, [MUX_00_AND_1, MUX_00_AND_2])

MUX_00_AND_2 = c.gate(op.and_, [wr00, BUS_3])
MUX_00_AND_3 = c.gate(op.and_, [inverted_wr00, RAM_00_3])
RAM_00_3_out = c.gate(op.or_, [MUX_00_AND_2, MUX_00_AND_3])

MUX_00_AND_3 = c.gate(op.and_, [wr00, BUS_4])
MUX_00_AND_4 = c.gate(op.and_, [inverted_wr00, RAM_00_4])
RAM_00_4_out = c.gate(op.or_, [MUX_00_AND_3, MUX_00_AND_4])

MUX_00_AND_4 = c.gate(op.and_, [wr00, BUS_5])
MUX_00_AND_5 = c.gate(op.and_, [inverted_wr00, RAM_00_5])
RAM_00_5_out = c.gate(op.or_, [MUX_00_AND_4, MUX_00_AND_5])

MUX_00_AND_5 = c.gate(op.and_, [wr00, BUS_6])
MUX_00_AND_6 = c.gate(op.and_, [inverted_wr00, RAM_00_6])
RAM_00_6_out = c.gate(op.or_, [MUX_00_AND_5, MUX_00_AND_6])

MUX_00_AND_6 = c.gate(op.and_, [wr00, BUS_7])
MUX_00_AND_7 = c.gate(op.and_, [inverted_wr00, RAM_00_7])
RAM_00_7_out = c.gate(op.or_, [MUX_00_AND_6, MUX_00_AND_7])

MUX_00_AND_7 = c.gate(op.and_, [wr00, BUS_8])
MUX_00_AND_8 = c.gate(op.and_, [inverted_wr00, RAM_00_8])
RAM_00_8_out = c.gate(op.or_, [MUX_00_AND_7, MUX_00_AND_8])

MUX_01_AND_8 = c.gate(op.and_, [wr01, BUS_1])
MUX_01_AND_9 = c.gate(op.and_, [inverted_wr01, RAM_01_1])
RAM_01_1_out = c.gate(op.or_, [MUX_01_AND_8, MUX_01_AND_9])

MUX_01_AND_9 = c.gate(op.and_, [wr01, BUS_2])
MUX_01_AND_10 = c.gate(op.and_, [inverted_wr01, RAM_01_2])
RAM_01_2_out = c.gate(op.or_, [MUX_01_AND_9, MUX_01_AND_10])

MUX_01_AND_10 = c.gate(op.and_, [wr01, BUS_3])
MUX_01_AND_11 = c.gate(op.and_, [inverted_wr01, RAM_01_3])
RAM_01_3_out = c.gate(op.or_, [MUX_01_AND_10, MUX_01_AND_11])

MUX_01_AND_11 = c.gate(op.and_, [wr01, BUS_4])
MUX_01_AND_12 = c.gate(op.and_, [inverted_wr01, RAM_01_4])
RAM_01_4_out = c.gate(op.or_, [MUX_01_AND_11, MUX_01_AND_12])

MUX_01_AND_12 = c.gate(op.and_, [wr01, BUS_5])
MUX_01_AND_13 = c.gate(op.and_, [inverted_wr01, RAM_01_5])
RAM_01_5_out = c.gate(op.or_, [MUX_01_AND_12, MUX_01_AND_13])

MUX_01_AND_13 = c.gate(op.and_, [wr01, BUS_6])
MUX_01_AND_14 = c.gate(op.and_, [inverted_wr01, RAM_01_6])
RAM_01_6_out = c.gate(op.or_, [MUX_01_AND_13, MUX_01_AND_14])

MUX_01_AND_14 = c.gate(op.and_, [wr01, BUS_7])
MUX_01_AND_15 = c.gate(op.and_, [inverted_wr01, RAM_01_7])
RAM_01_7_out = c.gate(op.or_, [MUX_01_AND_14, MUX_01_AND_15])

MUX_01_AND_15 = c.gate(op.and_, [wr01, BUS_8])
MUX_01_AND_16 = c.gate(op.and_, [inverted_wr01, RAM_01_8])
RAM_01_8_out = c.gate(op.or_, [MUX_01_AND_15, MUX_01_AND_16])

MUX_02_AND_16 = c.gate(op.and_, [wr02, BUS_1])
MUX_02_AND_17 = c.gate(op.and_, [inverted_wr02, RAM_02_1])
RAM_02_1_out = c.gate(op.or_, [MUX_02_AND_16, MUX_02_AND_17])

MUX_02_AND_17 = c.gate(op.and_, [wr02, BUS_2])
MUX_02_AND_18 = c.gate(op.and_, [inverted_wr02, RAM_02_2])
RAM_02_2_out = c.gate(op.or_, [MUX_02_AND_17, MUX_02_AND_18])

MUX_02_AND_18 = c.gate(op.and_, [wr02, BUS_3])
MUX_02_AND_19 = c.gate(op.and_, [inverted_wr02, RAM_02_3])
RAM_02_3_out = c.gate(op.or_, [MUX_02_AND_18, MUX_02_AND_19])

MUX_02_AND_19 = c.gate(op.and_, [wr02, BUS_4])
MUX_02_AND_20 = c.gate(op.and_, [inverted_wr02, RAM_02_4])
RAM_02_4_out = c.gate(op.or_, [MUX_02_AND_19, MUX_02_AND_20])

MUX_02_AND_20 = c.gate(op.and_, [wr02, BUS_5])
MUX_02_AND_21 = c.gate(op.and_, [inverted_wr02, RAM_02_5])
RAM_02_5_out = c.gate(op.or_, [MUX_02_AND_20, MUX_02_AND_21])

MUX_02_AND_21 = c.gate(op.and_, [wr02, BUS_6])
MUX_02_AND_22 = c.gate(op.and_, [inverted_wr02, RAM_02_6])
RAM_02_6_out = c.gate(op.or_, [MUX_02_AND_21, MUX_02_AND_22])

MUX_02_AND_22 = c.gate(op.and_, [wr02, BUS_7])
MUX_02_AND_23 = c.gate(op.and_, [inverted_wr02, RAM_02_7])
RAM_02_7_out = c.gate(op.or_, [MUX_02_AND_22, MUX_02_AND_23])

MUX_02_AND_23 = c.gate(op.and_, [wr02, BUS_8])
MUX_02_AND_24 = c.gate(op.and_, [inverted_wr02, RAM_02_8])
RAM_02_8_out = c.gate(op.or_, [MUX_02_AND_23, MUX_02_AND_24])

MUX_03_AND_24 = c.gate(op.and_, [wr03, BUS_1])
MUX_03_AND_25 = c.gate(op.and_, [inverted_wr03, RAM_03_1])
RAM_03_1_out = c.gate(op.or_, [MUX_03_AND_24, MUX_03_AND_25])

MUX_03_AND_25 = c.gate(op.and_, [wr03, BUS_2])
MUX_03_AND_26 = c.gate(op.and_, [inverted_wr03, RAM_03_2])
RAM_03_2_out = c.gate(op.or_, [MUX_03_AND_25, MUX_03_AND_26])

MUX_03_AND_26 = c.gate(op.and_, [wr03, BUS_3])
MUX_03_AND_27 = c.gate(op.and_, [inverted_wr03, RAM_03_3])
RAM_03_3_out = c.gate(op.or_, [MUX_03_AND_26, MUX_03_AND_27])

MUX_03_AND_27 = c.gate(op.and_, [wr03, BUS_4])
MUX_03_AND_28 = c.gate(op.and_, [inverted_wr03, RAM_03_4])
RAM_03_4_out = c.gate(op.or_, [MUX_03_AND_27, MUX_03_AND_28])

MUX_03_AND_28 = c.gate(op.and_, [wr03, BUS_5])
MUX_03_AND_29 = c.gate(op.and_, [inverted_wr03, RAM_03_5])
RAM_03_5_out = c.gate(op.or_, [MUX_03_AND_28, MUX_03_AND_29])

MUX_03_AND_29 = c.gate(op.and_, [wr03, BUS_6])
MUX_03_AND_30 = c.gate(op.and_, [inverted_wr03, RAM_03_6])
RAM_03_6_out = c.gate(op.or_, [MUX_03_AND_29, MUX_03_AND_30])

MUX_03_AND_30 = c.gate(op.and_, [wr03, BUS_7])
MUX_03_AND_31 = c.gate(op.and_, [inverted_wr03, RAM_03_7])
RAM_03_7_out = c.gate(op.or_, [MUX_03_AND_30, MUX_03_AND_31])

MUX_03_AND_31 = c.gate(op.and_, [wr03, BUS_8])
MUX_03_AND_32 = c.gate(op.and_, [inverted_wr03, RAM_03_8])
RAM_03_8_out = c.gate(op.or_, [MUX_03_AND_31, MUX_03_AND_32])

MUX_04_AND_32 = c.gate(op.and_, [wr04, BUS_1])
MUX_04_AND_33 = c.gate(op.and_, [inverted_wr04, RAM_04_1])
RAM_04_1_out = c.gate(op.or_, [MUX_04_AND_32, MUX_04_AND_33])

MUX_04_AND_33 = c.gate(op.and_, [wr04, BUS_2])
MUX_04_AND_34 = c.gate(op.and_, [inverted_wr04, RAM_04_2])
RAM_04_2_out = c.gate(op.or_, [MUX_04_AND_33, MUX_04_AND_34])

MUX_04_AND_34 = c.gate(op.and_, [wr04, BUS_3])
MUX_04_AND_35 = c.gate(op.and_, [inverted_wr04, RAM_04_3])
RAM_04_3_out = c.gate(op.or_, [MUX_04_AND_34, MUX_04_AND_35])

MUX_04_AND_35 = c.gate(op.and_, [wr04, BUS_4])
MUX_04_AND_36 = c.gate(op.and_, [inverted_wr04, RAM_04_4])
RAM_04_4_out = c.gate(op.or_, [MUX_04_AND_35, MUX_04_AND_36])

MUX_04_AND_36 = c.gate(op.and_, [wr04, BUS_5])
MUX_04_AND_37 = c.gate(op.and_, [inverted_wr04, RAM_04_5])
RAM_04_5_out = c.gate(op.or_, [MUX_04_AND_36, MUX_04_AND_37])

MUX_04_AND_37 = c.gate(op.and_, [wr04, BUS_6])
MUX_04_AND_38 = c.gate(op.and_, [inverted_wr04, RAM_04_6])
RAM_04_6_out = c.gate(op.or_, [MUX_04_AND_37, MUX_04_AND_38])

MUX_04_AND_38 = c.gate(op.and_, [wr04, BUS_7])
MUX_04_AND_39 = c.gate(op.and_, [inverted_wr04, RAM_04_7])
RAM_04_7_out = c.gate(op.or_, [MUX_04_AND_38, MUX_04_AND_39])

MUX_04_AND_39 = c.gate(op.and_, [wr04, BUS_8])
MUX_04_AND_40 = c.gate(op.and_, [inverted_wr04, RAM_04_8])
RAM_04_8_out = c.gate(op.or_, [MUX_04_AND_39, MUX_04_AND_40])

MUX_05_AND_40 = c.gate(op.and_, [wr05, BUS_1])
MUX_05_AND_41 = c.gate(op.and_, [inverted_wr05, RAM_05_1])
RAM_05_1_out = c.gate(op.or_, [MUX_05_AND_40, MUX_05_AND_41])

MUX_05_AND_41 = c.gate(op.and_, [wr05, BUS_2])
MUX_05_AND_42 = c.gate(op.and_, [inverted_wr05, RAM_05_2])
RAM_05_2_out = c.gate(op.or_, [MUX_05_AND_41, MUX_05_AND_42])

MUX_05_AND_42 = c.gate(op.and_, [wr05, BUS_3])
MUX_05_AND_43 = c.gate(op.and_, [inverted_wr05, RAM_05_3])
RAM_05_3_out = c.gate(op.or_, [MUX_05_AND_42, MUX_05_AND_43])

MUX_05_AND_43 = c.gate(op.and_, [wr05, BUS_4])
MUX_05_AND_44 = c.gate(op.and_, [inverted_wr05, RAM_05_4])
RAM_05_4_out = c.gate(op.or_, [MUX_05_AND_43, MUX_05_AND_44])

MUX_05_AND_44 = c.gate(op.and_, [wr05, BUS_5])
MUX_05_AND_45 = c.gate(op.and_, [inverted_wr05, RAM_05_5])
RAM_05_5_out = c.gate(op.or_, [MUX_05_AND_44, MUX_05_AND_45])

MUX_05_AND_45 = c.gate(op.and_, [wr05, BUS_6])
MUX_05_AND_46 = c.gate(op.and_, [inverted_wr05, RAM_05_6])
RAM_05_6_out = c.gate(op.or_, [MUX_05_AND_45, MUX_05_AND_46])

MUX_05_AND_46 = c.gate(op.and_, [wr05, BUS_7])
MUX_05_AND_47 = c.gate(op.and_, [inverted_wr05, RAM_05_7])
RAM_05_7_out = c.gate(op.or_, [MUX_05_AND_46, MUX_05_AND_47])

MUX_05_AND_47 = c.gate(op.and_, [wr05, BUS_8])
MUX_05_AND_48 = c.gate(op.and_, [inverted_wr05, RAM_05_8])
RAM_05_8_out = c.gate(op.or_, [MUX_05_AND_47, MUX_05_AND_48])

MUX_06_AND_48 = c.gate(op.and_, [wr06, BUS_1])
MUX_06_AND_49 = c.gate(op.and_, [inverted_wr06, RAM_06_1])
RAM_06_1_out = c.gate(op.or_, [MUX_06_AND_48, MUX_06_AND_49])

MUX_06_AND_49 = c.gate(op.and_, [wr06, BUS_2])
MUX_06_AND_50 = c.gate(op.and_, [inverted_wr06, RAM_06_2])
RAM_06_2_out = c.gate(op.or_, [MUX_06_AND_49, MUX_06_AND_50])

MUX_06_AND_50 = c.gate(op.and_, [wr06, BUS_3])
MUX_06_AND_51 = c.gate(op.and_, [inverted_wr06, RAM_06_3])
RAM_06_3_out = c.gate(op.or_, [MUX_06_AND_50, MUX_06_AND_51])

MUX_06_AND_51 = c.gate(op.and_, [wr06, BUS_4])
MUX_06_AND_52 = c.gate(op.and_, [inverted_wr06, RAM_06_4])
RAM_06_4_out = c.gate(op.or_, [MUX_06_AND_51, MUX_06_AND_52])

MUX_06_AND_52 = c.gate(op.and_, [wr06, BUS_5])
MUX_06_AND_53 = c.gate(op.and_, [inverted_wr06, RAM_06_5])
RAM_06_5_out = c.gate(op.or_, [MUX_06_AND_52, MUX_06_AND_53])

MUX_06_AND_53 = c.gate(op.and_, [wr06, BUS_6])
MUX_06_AND_54 = c.gate(op.and_, [inverted_wr06, RAM_06_6])
RAM_06_6_out = c.gate(op.or_, [MUX_06_AND_53, MUX_06_AND_54])

MUX_06_AND_54 = c.gate(op.and_, [wr06, BUS_7])
MUX_06_AND_55 = c.gate(op.and_, [inverted_wr06, RAM_06_7])
RAM_06_7_out = c.gate(op.or_, [MUX_06_AND_54, MUX_06_AND_55])

MUX_06_AND_55 = c.gate(op.and_, [wr06, BUS_8])
MUX_06_AND_56 = c.gate(op.and_, [inverted_wr06, RAM_06_8])
RAM_06_8_out = c.gate(op.or_, [MUX_06_AND_55, MUX_06_AND_56])

MUX_07_AND_56 = c.gate(op.and_, [wr07, BUS_1])
MUX_07_AND_57 = c.gate(op.and_, [inverted_wr07, RAM_07_1])
RAM_07_1_out = c.gate(op.or_, [MUX_07_AND_56, MUX_07_AND_57])

MUX_07_AND_57 = c.gate(op.and_, [wr07, BUS_2])
MUX_07_AND_58 = c.gate(op.and_, [inverted_wr07, RAM_07_2])
RAM_07_2_out = c.gate(op.or_, [MUX_07_AND_57, MUX_07_AND_58])

MUX_07_AND_58 = c.gate(op.and_, [wr07, BUS_3])
MUX_07_AND_59 = c.gate(op.and_, [inverted_wr07, RAM_07_3])
RAM_07_3_out = c.gate(op.or_, [MUX_07_AND_58, MUX_07_AND_59])

MUX_07_AND_59 = c.gate(op.and_, [wr07, BUS_4])
MUX_07_AND_60 = c.gate(op.and_, [inverted_wr07, RAM_07_4])
RAM_07_4_out = c.gate(op.or_, [MUX_07_AND_59, MUX_07_AND_60])

MUX_07_AND_60 = c.gate(op.and_, [wr07, BUS_5])
MUX_07_AND_61 = c.gate(op.and_, [inverted_wr07, RAM_07_5])
RAM_07_5_out = c.gate(op.or_, [MUX_07_AND_60, MUX_07_AND_61])

MUX_07_AND_61 = c.gate(op.and_, [wr07, BUS_6])
MUX_07_AND_62 = c.gate(op.and_, [inverted_wr07, RAM_07_6])
RAM_07_6_out = c.gate(op.or_, [MUX_07_AND_61, MUX_07_AND_62])

MUX_07_AND_62 = c.gate(op.and_, [wr07, BUS_7])
MUX_07_AND_63 = c.gate(op.and_, [inverted_wr07, RAM_07_7])
RAM_07_7_out = c.gate(op.or_, [MUX_07_AND_62, MUX_07_AND_63])

MUX_07_AND_63 = c.gate(op.and_, [wr07, BUS_8])
MUX_07_AND_64 = c.gate(op.and_, [inverted_wr07, RAM_07_8])
RAM_07_8_out = c.gate(op.or_, [MUX_07_AND_63, MUX_07_AND_64])

MUX_08_AND_64 = c.gate(op.and_, [wr08, BUS_1])
MUX_08_AND_65 = c.gate(op.and_, [inverted_wr08, RAM_08_1])
RAM_08_1_out = c.gate(op.or_, [MUX_08_AND_64, MUX_08_AND_65])

MUX_08_AND_65 = c.gate(op.and_, [wr08, BUS_2])
MUX_08_AND_66 = c.gate(op.and_, [inverted_wr08, RAM_08_2])
RAM_08_2_out = c.gate(op.or_, [MUX_08_AND_65, MUX_08_AND_66])

MUX_08_AND_66 = c.gate(op.and_, [wr08, BUS_3])
MUX_08_AND_67 = c.gate(op.and_, [inverted_wr08, RAM_08_3])
RAM_08_3_out = c.gate(op.or_, [MUX_08_AND_66, MUX_08_AND_67])

MUX_08_AND_67 = c.gate(op.and_, [wr08, BUS_4])
MUX_08_AND_68 = c.gate(op.and_, [inverted_wr08, RAM_08_4])
RAM_08_4_out = c.gate(op.or_, [MUX_08_AND_67, MUX_08_AND_68])

MUX_08_AND_68 = c.gate(op.and_, [wr08, BUS_5])
MUX_08_AND_69 = c.gate(op.and_, [inverted_wr08, RAM_08_5])
RAM_08_5_out = c.gate(op.or_, [MUX_08_AND_68, MUX_08_AND_69])

MUX_08_AND_69 = c.gate(op.and_, [wr08, BUS_6])
MUX_08_AND_70 = c.gate(op.and_, [inverted_wr08, RAM_08_6])
RAM_08_6_out = c.gate(op.or_, [MUX_08_AND_69, MUX_08_AND_70])

MUX_08_AND_70 = c.gate(op.and_, [wr08, BUS_7])
MUX_08_AND_71 = c.gate(op.and_, [inverted_wr08, RAM_08_7])
RAM_08_7_out = c.gate(op.or_, [MUX_08_AND_70, MUX_08_AND_71])

MUX_08_AND_71 = c.gate(op.and_, [wr08, BUS_8])
MUX_08_AND_72 = c.gate(op.and_, [inverted_wr08, RAM_08_8])
RAM_08_8_out = c.gate(op.or_, [MUX_08_AND_71, MUX_08_AND_72])

MUX_09_AND_72 = c.gate(op.and_, [wr09, BUS_1])
MUX_09_AND_73 = c.gate(op.and_, [inverted_wr09, RAM_09_1])
RAM_09_1_out = c.gate(op.or_, [MUX_09_AND_72, MUX_09_AND_73])

MUX_09_AND_73 = c.gate(op.and_, [wr09, BUS_2])
MUX_09_AND_74 = c.gate(op.and_, [inverted_wr09, RAM_09_2])
RAM_09_2_out = c.gate(op.or_, [MUX_09_AND_73, MUX_09_AND_74])

MUX_09_AND_74 = c.gate(op.and_, [wr09, BUS_3])
MUX_09_AND_75 = c.gate(op.and_, [inverted_wr09, RAM_09_3])
RAM_09_3_out = c.gate(op.or_, [MUX_09_AND_74, MUX_09_AND_75])

MUX_09_AND_75 = c.gate(op.and_, [wr09, BUS_4])
MUX_09_AND_76 = c.gate(op.and_, [inverted_wr09, RAM_09_4])
RAM_09_4_out = c.gate(op.or_, [MUX_09_AND_75, MUX_09_AND_76])

MUX_09_AND_76 = c.gate(op.and_, [wr09, BUS_5])
MUX_09_AND_77 = c.gate(op.and_, [inverted_wr09, RAM_09_5])
RAM_09_5_out = c.gate(op.or_, [MUX_09_AND_76, MUX_09_AND_77])

MUX_09_AND_77 = c.gate(op.and_, [wr09, BUS_6])
MUX_09_AND_78 = c.gate(op.and_, [inverted_wr09, RAM_09_6])
RAM_09_6_out = c.gate(op.or_, [MUX_09_AND_77, MUX_09_AND_78])

MUX_09_AND_78 = c.gate(op.and_, [wr09, BUS_7])
MUX_09_AND_79 = c.gate(op.and_, [inverted_wr09, RAM_09_7])
RAM_09_7_out = c.gate(op.or_, [MUX_09_AND_78, MUX_09_AND_79])

MUX_09_AND_79 = c.gate(op.and_, [wr09, BUS_8])
MUX_09_AND_80 = c.gate(op.and_, [inverted_wr09, RAM_09_8])
RAM_09_8_out = c.gate(op.or_, [MUX_09_AND_79, MUX_09_AND_80])

MUX_10_AND_80 = c.gate(op.and_, [wr10, BUS_1])
MUX_10_AND_81 = c.gate(op.and_, [inverted_wr10, RAM_10_1])
RAM_10_1_out = c.gate(op.or_, [MUX_10_AND_80, MUX_10_AND_81])

MUX_10_AND_81 = c.gate(op.and_, [wr10, BUS_2])
MUX_10_AND_82 = c.gate(op.and_, [inverted_wr10, RAM_10_2])
RAM_10_2_out = c.gate(op.or_, [MUX_10_AND_81, MUX_10_AND_82])

MUX_10_AND_82 = c.gate(op.and_, [wr10, BUS_3])
MUX_10_AND_83 = c.gate(op.and_, [inverted_wr10, RAM_10_3])
RAM_10_3_out = c.gate(op.or_, [MUX_10_AND_82, MUX_10_AND_83])

MUX_10_AND_83 = c.gate(op.and_, [wr10, BUS_4])
MUX_10_AND_84 = c.gate(op.and_, [inverted_wr10, RAM_10_4])
RAM_10_4_out = c.gate(op.or_, [MUX_10_AND_83, MUX_10_AND_84])

MUX_10_AND_84 = c.gate(op.and_, [wr10, BUS_5])
MUX_10_AND_85 = c.gate(op.and_, [inverted_wr10, RAM_10_5])
RAM_10_5_out = c.gate(op.or_, [MUX_10_AND_84, MUX_10_AND_85])

MUX_10_AND_85 = c.gate(op.and_, [wr10, BUS_6])
MUX_10_AND_86 = c.gate(op.and_, [inverted_wr10, RAM_10_6])
RAM_10_6_out = c.gate(op.or_, [MUX_10_AND_85, MUX_10_AND_86])

MUX_10_AND_86 = c.gate(op.and_, [wr10, BUS_7])
MUX_10_AND_87 = c.gate(op.and_, [inverted_wr10, RAM_10_7])
RAM_10_7_out = c.gate(op.or_, [MUX_10_AND_86, MUX_10_AND_87])

MUX_10_AND_87 = c.gate(op.and_, [wr10, BUS_8])
MUX_10_AND_88 = c.gate(op.and_, [inverted_wr10, RAM_10_8])
RAM_10_8_out = c.gate(op.or_, [MUX_10_AND_87, MUX_10_AND_88])

MUX_11_AND_88 = c.gate(op.and_, [wr11, BUS_1])
MUX_11_AND_89 = c.gate(op.and_, [inverted_wr11, RAM_11_1])
RAM_11_1_out = c.gate(op.or_, [MUX_11_AND_88, MUX_11_AND_89])

MUX_11_AND_89 = c.gate(op.and_, [wr11, BUS_2])
MUX_11_AND_90 = c.gate(op.and_, [inverted_wr11, RAM_11_2])
RAM_11_2_out = c.gate(op.or_, [MUX_11_AND_89, MUX_11_AND_90])

MUX_11_AND_90 = c.gate(op.and_, [wr11, BUS_3])
MUX_11_AND_91 = c.gate(op.and_, [inverted_wr11, RAM_11_3])
RAM_11_3_out = c.gate(op.or_, [MUX_11_AND_90, MUX_11_AND_91])

MUX_11_AND_91 = c.gate(op.and_, [wr11, BUS_4])
MUX_11_AND_92 = c.gate(op.and_, [inverted_wr11, RAM_11_4])
RAM_11_4_out = c.gate(op.or_, [MUX_11_AND_91, MUX_11_AND_92])

MUX_11_AND_92 = c.gate(op.and_, [wr11, BUS_5])
MUX_11_AND_93 = c.gate(op.and_, [inverted_wr11, RAM_11_5])
RAM_11_5_out = c.gate(op.or_, [MUX_11_AND_92, MUX_11_AND_93])

MUX_11_AND_93 = c.gate(op.and_, [wr11, BUS_6])
MUX_11_AND_94 = c.gate(op.and_, [inverted_wr11, RAM_11_6])
RAM_11_6_out = c.gate(op.or_, [MUX_11_AND_93, MUX_11_AND_94])

MUX_11_AND_94 = c.gate(op.and_, [wr11, BUS_7])
MUX_11_AND_95 = c.gate(op.and_, [inverted_wr11, RAM_11_7])
RAM_11_7_out = c.gate(op.or_, [MUX_11_AND_94, MUX_11_AND_95])

MUX_11_AND_95 = c.gate(op.and_, [wr11, BUS_8])
MUX_11_AND_96 = c.gate(op.and_, [inverted_wr11, RAM_11_8])
RAM_11_8_out = c.gate(op.or_, [MUX_11_AND_95, MUX_11_AND_96])

MUX_12_AND_96 = c.gate(op.and_, [wr12, BUS_1])
MUX_12_AND_97 = c.gate(op.and_, [inverted_wr12, RAM_12_1])
RAM_12_1_out = c.gate(op.or_, [MUX_12_AND_96, MUX_12_AND_97])

MUX_12_AND_97 = c.gate(op.and_, [wr12, BUS_2])
MUX_12_AND_98 = c.gate(op.and_, [inverted_wr12, RAM_12_2])
RAM_12_2_out = c.gate(op.or_, [MUX_12_AND_97, MUX_12_AND_98])

MUX_12_AND_98 = c.gate(op.and_, [wr12, BUS_3])
MUX_12_AND_99 = c.gate(op.and_, [inverted_wr12, RAM_12_3])
RAM_12_3_out = c.gate(op.or_, [MUX_12_AND_98, MUX_12_AND_99])

MUX_12_AND_99 = c.gate(op.and_, [wr12, BUS_4])
MUX_12_AND_100 = c.gate(op.and_, [inverted_wr12, RAM_12_4])
RAM_12_4_out = c.gate(op.or_, [MUX_12_AND_99, MUX_12_AND_100])

MUX_12_AND_100 = c.gate(op.and_, [wr12, BUS_5])
MUX_12_AND_101 = c.gate(op.and_, [inverted_wr12, RAM_12_5])
RAM_12_5_out = c.gate(op.or_, [MUX_12_AND_100, MUX_12_AND_101])

MUX_12_AND_101 = c.gate(op.and_, [wr12, BUS_6])
MUX_12_AND_102 = c.gate(op.and_, [inverted_wr12, RAM_12_6])
RAM_12_6_out = c.gate(op.or_, [MUX_12_AND_101, MUX_12_AND_102])

MUX_12_AND_102 = c.gate(op.and_, [wr12, BUS_7])
MUX_12_AND_103 = c.gate(op.and_, [inverted_wr12, RAM_12_7])
RAM_12_7_out = c.gate(op.or_, [MUX_12_AND_102, MUX_12_AND_103])

MUX_12_AND_103 = c.gate(op.and_, [wr12, BUS_8])
MUX_12_AND_104 = c.gate(op.and_, [inverted_wr12, RAM_12_8])
RAM_12_8_out = c.gate(op.or_, [MUX_12_AND_103, MUX_12_AND_104])

MUX_13_AND_104 = c.gate(op.and_, [wr13, BUS_1])
MUX_13_AND_105 = c.gate(op.and_, [inverted_wr13, RAM_13_1])
RAM_13_1_out = c.gate(op.or_, [MUX_13_AND_104, MUX_13_AND_105])

MUX_13_AND_105 = c.gate(op.and_, [wr13, BUS_2])
MUX_13_AND_106 = c.gate(op.and_, [inverted_wr13, RAM_13_2])
RAM_13_2_out = c.gate(op.or_, [MUX_13_AND_105, MUX_13_AND_106])

MUX_13_AND_106 = c.gate(op.and_, [wr13, BUS_3])
MUX_13_AND_107 = c.gate(op.and_, [inverted_wr13, RAM_13_3])
RAM_13_3_out = c.gate(op.or_, [MUX_13_AND_106, MUX_13_AND_107])

MUX_13_AND_107 = c.gate(op.and_, [wr13, BUS_4])
MUX_13_AND_108 = c.gate(op.and_, [inverted_wr13, RAM_13_4])
RAM_13_4_out = c.gate(op.or_, [MUX_13_AND_107, MUX_13_AND_108])

MUX_13_AND_108 = c.gate(op.and_, [wr13, BUS_5])
MUX_13_AND_109 = c.gate(op.and_, [inverted_wr13, RAM_13_5])
RAM_13_5_out = c.gate(op.or_, [MUX_13_AND_108, MUX_13_AND_109])

MUX_13_AND_109 = c.gate(op.and_, [wr13, BUS_6])
MUX_13_AND_110 = c.gate(op.and_, [inverted_wr13, RAM_13_6])
RAM_13_6_out = c.gate(op.or_, [MUX_13_AND_109, MUX_13_AND_110])

MUX_13_AND_110 = c.gate(op.and_, [wr13, BUS_7])
MUX_13_AND_111 = c.gate(op.and_, [inverted_wr13, RAM_13_7])
RAM_13_7_out = c.gate(op.or_, [MUX_13_AND_110, MUX_13_AND_111])

MUX_13_AND_111 = c.gate(op.and_, [wr13, BUS_8])
MUX_13_AND_112 = c.gate(op.and_, [inverted_wr13, RAM_13_8])
RAM_13_8_out = c.gate(op.or_, [MUX_13_AND_111, MUX_13_AND_112])

MUX_14_AND_112 = c.gate(op.and_, [wr14, BUS_1])
MUX_14_AND_113 = c.gate(op.and_, [inverted_wr14, RAM_14_1])
RAM_14_1_out = c.gate(op.or_, [MUX_14_AND_112, MUX_14_AND_113])

MUX_14_AND_113 = c.gate(op.and_, [wr14, BUS_2])
MUX_14_AND_114 = c.gate(op.and_, [inverted_wr14, RAM_14_2])
RAM_14_2_out = c.gate(op.or_, [MUX_14_AND_113, MUX_14_AND_114])

MUX_14_AND_114 = c.gate(op.and_, [wr14, BUS_3])
MUX_14_AND_115 = c.gate(op.and_, [inverted_wr14, RAM_14_3])
RAM_14_3_out = c.gate(op.or_, [MUX_14_AND_114, MUX_14_AND_115])

MUX_14_AND_115 = c.gate(op.and_, [wr14, BUS_4])
MUX_14_AND_116 = c.gate(op.and_, [inverted_wr14, RAM_14_4])
RAM_14_4_out = c.gate(op.or_, [MUX_14_AND_115, MUX_14_AND_116])

MUX_14_AND_116 = c.gate(op.and_, [wr14, BUS_5])
MUX_14_AND_117 = c.gate(op.and_, [inverted_wr14, RAM_14_5])
RAM_14_5_out = c.gate(op.or_, [MUX_14_AND_116, MUX_14_AND_117])

MUX_14_AND_117 = c.gate(op.and_, [wr14, BUS_6])
MUX_14_AND_118 = c.gate(op.and_, [inverted_wr14, RAM_14_6])
RAM_14_6_out = c.gate(op.or_, [MUX_14_AND_117, MUX_14_AND_118])

MUX_14_AND_118 = c.gate(op.and_, [wr14, BUS_7])
MUX_14_AND_119 = c.gate(op.and_, [inverted_wr14, RAM_14_7])
RAM_14_7_out = c.gate(op.or_, [MUX_14_AND_118, MUX_14_AND_119])

MUX_14_AND_119 = c.gate(op.and_, [wr14, BUS_8])
MUX_14_AND_120 = c.gate(op.and_, [inverted_wr14, RAM_14_8])
RAM_14_8_out = c.gate(op.or_, [MUX_14_AND_119, MUX_14_AND_120])

MUX_15_AND_120 = c.gate(op.and_, [wr15, BUS_1])
MUX_15_AND_121 = c.gate(op.and_, [inverted_wr15, RAM_15_1])
RAM_15_1_out = c.gate(op.or_, [MUX_15_AND_120, MUX_15_AND_121])

MUX_15_AND_121 = c.gate(op.and_, [wr15, BUS_2])
MUX_15_AND_122 = c.gate(op.and_, [inverted_wr15, RAM_15_2])
RAM_15_2_out = c.gate(op.or_, [MUX_15_AND_121, MUX_15_AND_122])

MUX_15_AND_122 = c.gate(op.and_, [wr15, BUS_3])
MUX_15_AND_123 = c.gate(op.and_, [inverted_wr15, RAM_15_3])
RAM_15_3_out = c.gate(op.or_, [MUX_15_AND_122, MUX_15_AND_123])

MUX_15_AND_123 = c.gate(op.and_, [wr15, BUS_4])
MUX_15_AND_124 = c.gate(op.and_, [inverted_wr15, RAM_15_4])
RAM_15_4_out = c.gate(op.or_, [MUX_15_AND_123, MUX_15_AND_124])

MUX_15_AND_124 = c.gate(op.and_, [wr15, BUS_5])
MUX_15_AND_125 = c.gate(op.and_, [inverted_wr15, RAM_15_5])
RAM_15_5_out = c.gate(op.or_, [MUX_15_AND_124, MUX_15_AND_125])

MUX_15_AND_125 = c.gate(op.and_, [wr15, BUS_6])
MUX_15_AND_126 = c.gate(op.and_, [inverted_wr15, RAM_15_6])
RAM_15_6_out = c.gate(op.or_, [MUX_15_AND_125, MUX_15_AND_126])

MUX_15_AND_126 = c.gate(op.and_, [wr15, BUS_7])
MUX_15_AND_127 = c.gate(op.and_, [inverted_wr15, RAM_15_7])
RAM_15_7_out = c.gate(op.or_, [MUX_15_AND_126, MUX_15_AND_127])

MUX_15_AND_127 = c.gate(op.and_, [wr15, BUS_8])
MUX_15_AND_128 = c.gate(op.and_, [inverted_wr15, RAM_15_8])
RAM_15_8_out = c.gate(op.or_, [MUX_15_AND_127, MUX_15_AND_128])

final_PC_3_OUT = c.gate(op.id_, [PC_3_OUT], is_output=True)
final_PC_2_OUT = c.gate(op.id_, [PC_2_OUT], is_output=True)
final_PC_1_OUT = c.gate(op.id_, [PC_1_OUT], is_output=True)
final_PC_0_OUT = c.gate(op.id_, [PC_0_OUT], is_output=True)
final_MC_1_OUT = c.gate(op.id_, [MC_1_OUT], is_output=True)
final_MC_0_OUT = c.gate(op.id_, [MC_0_OUT], is_output=True)
final_M3_OUT = c.gate(op.id_, [M3_OUT], is_output=True)
final_M2_OUT = c.gate(op.id_, [M2_OUT], is_output=True)
final_M1_OUT = c.gate(op.id_, [M1_OUT], is_output=True)
final_M0_OUT = c.gate(op.id_, [M0_OUT], is_output=True)
final_carry_out = c.gate(op.id_, [carry_out], is_output=True)
final_A8_out = c.gate(op.id_, [A8_out], is_output=True)
final_A7_out = c.gate(op.id_, [A7_out], is_output=True)
final_A6_out = c.gate(op.id_, [A6_out], is_output=True)
final_A5_out = c.gate(op.id_, [A5_out], is_output=True)
final_A4_out = c.gate(op.id_, [A4_out], is_output=True)
final_A3_out = c.gate(op.id_, [A3_out], is_output=True)
final_A2_out = c.gate(op.id_, [A2_out], is_output=True)
final_A1_out = c.gate(op.id_, [A1_out], is_output=True)
final_B8_out = c.gate(op.id_, [B8], is_output=True)
final_B7_out = c.gate(op.id_, [B7], is_output=True)
final_B6_out = c.gate(op.id_, [B6], is_output=True)
final_B5_out = c.gate(op.id_, [B5], is_output=True)
final_B4_out = c.gate(op.id_, [B4], is_output=True)
final_B3_out = c.gate(op.id_, [B3], is_output=True)
final_B2_out = c.gate(op.id_, [B2], is_output=True)
final_B1_out = c.gate(op.id_, [B1], is_output=True)
final_IR_8_out = c.gate(op.id_, [IR_8_out], is_output=True)
final_IR_7_out = c.gate(op.id_, [IR_7_out], is_output=True)
final_IR_6_out = c.gate(op.id_, [IR_6_out], is_output=True)
final_IR_5_out = c.gate(op.id_, [IR_5_out], is_output=True)
final_IR_4_out = c.gate(op.id_, [IR_4_out], is_output=True)
final_IR_3_out = c.gate(op.id_, [IR_3_out], is_output=True)
final_IR_2_out = c.gate(op.id_, [IR_2_out], is_output=True)
final_IR_1_out = c.gate(op.id_, [IR_1_out], is_output=True)
final_RAM_00_8_out = c.gate(op.id_, [RAM_00_8_out], is_output=True)
final_RAM_00_7_out = c.gate(op.id_, [RAM_00_7_out], is_output=True)
final_RAM_00_6_out = c.gate(op.id_, [RAM_00_6_out], is_output=True)
final_RAM_00_5_out = c.gate(op.id_, [RAM_00_5_out], is_output=True)
final_RAM_00_4_out = c.gate(op.id_, [RAM_00_4_out], is_output=True)
final_RAM_00_3_out = c.gate(op.id_, [RAM_00_3_out], is_output=True)
final_RAM_00_2_out = c.gate(op.id_, [RAM_00_2_out], is_output=True)
final_RAM_00_1_out = c.gate(op.id_, [RAM_00_1_out], is_output=True)
final_RAM_01_8_out = c.gate(op.id_, [RAM_01_8_out], is_output=True)
final_RAM_01_7_out = c.gate(op.id_, [RAM_01_7_out], is_output=True)
final_RAM_01_6_out = c.gate(op.id_, [RAM_01_6_out], is_output=True)
final_RAM_01_5_out = c.gate(op.id_, [RAM_01_5_out], is_output=True)
final_RAM_01_4_out = c.gate(op.id_, [RAM_01_4_out], is_output=True)
final_RAM_01_3_out = c.gate(op.id_, [RAM_01_3_out], is_output=True)
final_RAM_01_2_out = c.gate(op.id_, [RAM_01_2_out], is_output=True)
final_RAM_01_1_out = c.gate(op.id_, [RAM_01_1_out], is_output=True)
final_RAM_02_8_out = c.gate(op.id_, [RAM_02_8_out], is_output=True)
final_RAM_02_7_out = c.gate(op.id_, [RAM_02_7_out], is_output=True)
final_RAM_02_6_out = c.gate(op.id_, [RAM_02_6_out], is_output=True)
final_RAM_02_5_out = c.gate(op.id_, [RAM_02_5_out], is_output=True)
final_RAM_02_4_out = c.gate(op.id_, [RAM_02_4_out], is_output=True)
final_RAM_02_3_out = c.gate(op.id_, [RAM_02_3_out], is_output=True)
final_RAM_02_2_out = c.gate(op.id_, [RAM_02_2_out], is_output=True)
final_RAM_02_1_out = c.gate(op.id_, [RAM_02_1_out], is_output=True)
final_RAM_03_8_out = c.gate(op.id_, [RAM_03_8_out], is_output=True)
final_RAM_03_7_out = c.gate(op.id_, [RAM_03_7_out], is_output=True)
final_RAM_03_6_out = c.gate(op.id_, [RAM_03_6_out], is_output=True)
final_RAM_03_5_out = c.gate(op.id_, [RAM_03_5_out], is_output=True)
final_RAM_03_4_out = c.gate(op.id_, [RAM_03_4_out], is_output=True)
final_RAM_03_3_out = c.gate(op.id_, [RAM_03_3_out], is_output=True)
final_RAM_03_2_out = c.gate(op.id_, [RAM_03_2_out], is_output=True)
final_RAM_03_1_out = c.gate(op.id_, [RAM_03_1_out], is_output=True)
final_RAM_04_8_out = c.gate(op.id_, [RAM_04_8_out], is_output=True)
final_RAM_04_7_out = c.gate(op.id_, [RAM_04_7_out], is_output=True)
final_RAM_04_6_out = c.gate(op.id_, [RAM_04_6_out], is_output=True)
final_RAM_04_5_out = c.gate(op.id_, [RAM_04_5_out], is_output=True)
final_RAM_04_4_out = c.gate(op.id_, [RAM_04_4_out], is_output=True)
final_RAM_04_3_out = c.gate(op.id_, [RAM_04_3_out], is_output=True)
final_RAM_04_2_out = c.gate(op.id_, [RAM_04_2_out], is_output=True)
final_RAM_04_1_out = c.gate(op.id_, [RAM_04_1_out], is_output=True)
final_RAM_05_8_out = c.gate(op.id_, [RAM_05_8_out], is_output=True)
final_RAM_05_7_out = c.gate(op.id_, [RAM_05_7_out], is_output=True)
final_RAM_05_6_out = c.gate(op.id_, [RAM_05_6_out], is_output=True)
final_RAM_05_5_out = c.gate(op.id_, [RAM_05_5_out], is_output=True)
final_RAM_05_4_out = c.gate(op.id_, [RAM_05_4_out], is_output=True)
final_RAM_05_3_out = c.gate(op.id_, [RAM_05_3_out], is_output=True)
final_RAM_05_2_out = c.gate(op.id_, [RAM_05_2_out], is_output=True)
final_RAM_05_1_out = c.gate(op.id_, [RAM_05_1_out], is_output=True)
final_RAM_06_8_out = c.gate(op.id_, [RAM_06_8_out], is_output=True)
final_RAM_06_7_out = c.gate(op.id_, [RAM_06_7_out], is_output=True)
final_RAM_06_6_out = c.gate(op.id_, [RAM_06_6_out], is_output=True)
final_RAM_06_5_out = c.gate(op.id_, [RAM_06_5_out], is_output=True)
final_RAM_06_4_out = c.gate(op.id_, [RAM_06_4_out], is_output=True)
final_RAM_06_3_out = c.gate(op.id_, [RAM_06_3_out], is_output=True)
final_RAM_06_2_out = c.gate(op.id_, [RAM_06_2_out], is_output=True)
final_RAM_06_1_out = c.gate(op.id_, [RAM_06_1_out], is_output=True)
final_RAM_07_8_out = c.gate(op.id_, [RAM_07_8_out], is_output=True)
final_RAM_07_7_out = c.gate(op.id_, [RAM_07_7_out], is_output=True)
final_RAM_07_6_out = c.gate(op.id_, [RAM_07_6_out], is_output=True)
final_RAM_07_5_out = c.gate(op.id_, [RAM_07_5_out], is_output=True)
final_RAM_07_4_out = c.gate(op.id_, [RAM_07_4_out], is_output=True)
final_RAM_07_3_out = c.gate(op.id_, [RAM_07_3_out], is_output=True)
final_RAM_07_2_out = c.gate(op.id_, [RAM_07_2_out], is_output=True)
final_RAM_07_1_out = c.gate(op.id_, [RAM_07_1_out], is_output=True)
final_RAM_08_8_out = c.gate(op.id_, [RAM_08_8_out], is_output=True)
final_RAM_08_7_out = c.gate(op.id_, [RAM_08_7_out], is_output=True)
final_RAM_08_6_out = c.gate(op.id_, [RAM_08_6_out], is_output=True)
final_RAM_08_5_out = c.gate(op.id_, [RAM_08_5_out], is_output=True)
final_RAM_08_4_out = c.gate(op.id_, [RAM_08_4_out], is_output=True)
final_RAM_08_3_out = c.gate(op.id_, [RAM_08_3_out], is_output=True)
final_RAM_08_2_out = c.gate(op.id_, [RAM_08_2_out], is_output=True)
final_RAM_08_1_out = c.gate(op.id_, [RAM_08_1_out], is_output=True)
final_RAM_09_8_out = c.gate(op.id_, [RAM_09_8_out], is_output=True)
final_RAM_09_7_out = c.gate(op.id_, [RAM_09_7_out], is_output=True)
final_RAM_09_6_out = c.gate(op.id_, [RAM_09_6_out], is_output=True)
final_RAM_09_5_out = c.gate(op.id_, [RAM_09_5_out], is_output=True)
final_RAM_09_4_out = c.gate(op.id_, [RAM_09_4_out], is_output=True)
final_RAM_09_3_out = c.gate(op.id_, [RAM_09_3_out], is_output=True)
final_RAM_09_2_out = c.gate(op.id_, [RAM_09_2_out], is_output=True)
final_RAM_09_1_out = c.gate(op.id_, [RAM_09_1_out], is_output=True)
final_RAM_10_8_out = c.gate(op.id_, [RAM_10_8_out], is_output=True)
final_RAM_10_7_out = c.gate(op.id_, [RAM_10_7_out], is_output=True)
final_RAM_10_6_out = c.gate(op.id_, [RAM_10_6_out], is_output=True)
final_RAM_10_5_out = c.gate(op.id_, [RAM_10_5_out], is_output=True)
final_RAM_10_4_out = c.gate(op.id_, [RAM_10_4_out], is_output=True)
final_RAM_10_3_out = c.gate(op.id_, [RAM_10_3_out], is_output=True)
final_RAM_10_2_out = c.gate(op.id_, [RAM_10_2_out], is_output=True)
final_RAM_10_1_out = c.gate(op.id_, [RAM_10_1_out], is_output=True)
final_RAM_11_8_out = c.gate(op.id_, [RAM_11_8_out], is_output=True)
final_RAM_11_7_out = c.gate(op.id_, [RAM_11_7_out], is_output=True)
final_RAM_11_6_out = c.gate(op.id_, [RAM_11_6_out], is_output=True)
final_RAM_11_5_out = c.gate(op.id_, [RAM_11_5_out], is_output=True)
final_RAM_11_4_out = c.gate(op.id_, [RAM_11_4_out], is_output=True)
final_RAM_11_3_out = c.gate(op.id_, [RAM_11_3_out], is_output=True)
final_RAM_11_2_out = c.gate(op.id_, [RAM_11_2_out], is_output=True)
final_RAM_11_1_out = c.gate(op.id_, [RAM_11_1_out], is_output=True)
final_RAM_12_8_out = c.gate(op.id_, [RAM_12_8_out], is_output=True)
final_RAM_12_7_out = c.gate(op.id_, [RAM_12_7_out], is_output=True)
final_RAM_12_6_out = c.gate(op.id_, [RAM_12_6_out], is_output=True)
final_RAM_12_5_out = c.gate(op.id_, [RAM_12_5_out], is_output=True)
final_RAM_12_4_out = c.gate(op.id_, [RAM_12_4_out], is_output=True)
final_RAM_12_3_out = c.gate(op.id_, [RAM_12_3_out], is_output=True)
final_RAM_12_2_out = c.gate(op.id_, [RAM_12_2_out], is_output=True)
final_RAM_12_1_out = c.gate(op.id_, [RAM_12_1_out], is_output=True)
final_RAM_13_8_out = c.gate(op.id_, [RAM_13_8_out], is_output=True)
final_RAM_13_7_out = c.gate(op.id_, [RAM_13_7_out], is_output=True)
final_RAM_13_6_out = c.gate(op.id_, [RAM_13_6_out], is_output=True)
final_RAM_13_5_out = c.gate(op.id_, [RAM_13_5_out], is_output=True)
final_RAM_13_4_out = c.gate(op.id_, [RAM_13_4_out], is_output=True)
final_RAM_13_3_out = c.gate(op.id_, [RAM_13_3_out], is_output=True)
final_RAM_13_2_out = c.gate(op.id_, [RAM_13_2_out], is_output=True)
final_RAM_13_1_out = c.gate(op.id_, [RAM_13_1_out], is_output=True)
final_RAM_14_8_out = c.gate(op.id_, [RAM_14_8_out], is_output=True)
final_RAM_14_7_out = c.gate(op.id_, [RAM_14_7_out], is_output=True)
final_RAM_14_6_out = c.gate(op.id_, [RAM_14_6_out], is_output=True)
final_RAM_14_5_out = c.gate(op.id_, [RAM_14_5_out], is_output=True)
final_RAM_14_4_out = c.gate(op.id_, [RAM_14_4_out], is_output=True)
final_RAM_14_3_out = c.gate(op.id_, [RAM_14_3_out], is_output=True)
final_RAM_14_2_out = c.gate(op.id_, [RAM_14_2_out], is_output=True)
final_RAM_14_1_out = c.gate(op.id_, [RAM_14_1_out], is_output=True)
final_RAM_15_8_out = c.gate(op.id_, [RAM_15_8_out], is_output=True)
final_RAM_15_7_out = c.gate(op.id_, [RAM_15_7_out], is_output=True)
final_RAM_15_6_out = c.gate(op.id_, [RAM_15_6_out], is_output=True)
final_RAM_15_5_out = c.gate(op.id_, [RAM_15_5_out], is_output=True)
final_RAM_15_4_out = c.gate(op.id_, [RAM_15_4_out], is_output=True)
final_RAM_15_3_out = c.gate(op.id_, [RAM_15_3_out], is_output=True)
final_RAM_15_2_out = c.gate(op.id_, [RAM_15_2_out], is_output=True)
final_RAM_15_1_out = c.gate(op.id_, [RAM_15_1_out], is_output=True)
#debugging: turn on the following outputs
#(and the 8 debugging inputs near the
#beginning) to view the contents of the bus,
#which I find helps with debugging
# final_BUS_8_out = c.gate(op.id_, [BUS_8], is_output=True)
# final_BUS_7_out = c.gate(op.id_, [BUS_7], is_output=True)
# final_BUS_6_out = c.gate(op.id_, [BUS_6], is_output=True)
# final_BUS_5_out = c.gate(op.id_, [BUS_5], is_output=True)
# final_BUS_4_out = c.gate(op.id_, [BUS_4], is_output=True)
# final_BUS_3_out = c.gate(op.id_, [BUS_3], is_output=True)
# final_BUS_2_out = c.gate(op.id_, [BUS_2], is_output=True)
# final_BUS_1_out = c.gate(op.id_, [BUS_1], is_output=True)

#run it like this: ./bin/python 8bit-cpu.py '[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
print(c.evaluate(initial_state))

#uncomment the following lines, and comment out the evaluate line just above this,
#to print a bristol circuit file
# for line in bfcl.circuit(c).emit().split('\n'):
	# print(line)

'''
I find the following three commands helpful for running bitvm step by step
newline='[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,0,1,1,0,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0]'
newline2=$(./bin/python 8bit-cpu.py "$newline");echo $newline2 | ./parser.sh
newline=$(./bin/python 8bit-cpu.py "$newline2");echo $newline | ./parser.sh

I find the following line helpful for printing out a bristol circuit when
the evaluate line is commented out and the bfcl.circuit(c).emit() line
is uncommented
./bin/python 8bit-cpu.py "$newline" > 8bit-cpu.txt
'''

'''
var input = [
//program counter
0,0,0,0,
//microinstruction counter
0,0,
//memory address register
0,0,0,0,
//initial carry out
0,
//register A
0,0,0,0,0,0,0,0,
//register B
0,0,0,0,0,0,0,0,
//instruction register
0,0,0,0,0,0,0,0,
//ram
0,0,0,1,1,1,1,1,
0,0,1,0,1,1,1,0,
1,1,1,1,0,0,0,0,
1,1,1,1,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
//if debugging inputs and outputs are turned on, uncomment this line:
//0,0,0,0,0,0,0,0
];
document.body.innerHTML = '';
document.write( JSON.stringify( input ) );
'''